// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hx_concurrent_Future
#include <hx/concurrent/Future.h>
#endif
#ifndef INCLUDED_hx_concurrent_Service
#include <hx/concurrent/Service.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceBase
#include <hx/concurrent/ServiceBase.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceState
#include <hx/concurrent/ServiceState.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection_Collection
#include <hx/concurrent/collection/Collection.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection_OrderedCollection
#include <hx/concurrent/collection/OrderedCollection.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection__SynchronizedArray_SynchronizedArrayImpl
#include <hx/concurrent/collection/_SynchronizedArray/SynchronizedArrayImpl.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection__SynchronizedArray_SynchronizedArray_Impl_
#include <hx/concurrent/collection/_SynchronizedArray/SynchronizedArray_Impl_.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_Executor
#include <hx/concurrent/executor/Executor.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_Schedule
#include <hx/concurrent/executor/Schedule.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_TaskFuture
#include <hx/concurrent/executor/TaskFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_internal__Either2__Either2
#include <hx/concurrent/internal/_Either2/_Either2.h>
#endif
#ifndef INCLUDED_hx_concurrent_internal__Either3__Either3
#include <hx/concurrent/internal/_Either3/_Either3.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_20_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",20,0x087e5c05)
HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_8_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",8,0x087e5c05)

void Main_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::collection::_SynchronizedArray::SynchronizedArrayImpl,array) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_20_new)
HXLINE(  21)			int start = ::openfl::Lib_obj::getTimer();
HXLINE(  22)			Float rand = (::Math_obj::random() * ( (Float)(10000) ));
HXLINE(  24)			do {
HXLINE(  25)				rand = (::Math_obj::random() * ( (Float)(10000) ));
            			} while((rand > 10));
;
HXLINE(  28)			array->add(rand);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_8_new)
HXLINE(  10)		this->executor = ::hx::concurrent::executor::Executor_obj::create(32,null());
HXLINE(  14)		super::__construct();
HXLINE(  16)		::haxe::Log_obj::trace(this->executor->state,::hx::SourceInfo(HX_("Source/Main.hx",b1,67,fd,ea),16,HX_("Main",59,64,2f,33),HX_("new",60,d0,53,00)));
HXLINE(  18)		 ::hx::concurrent::collection::_SynchronizedArray::SynchronizedArrayImpl array = ::hx::concurrent::collection::_SynchronizedArray::SynchronizedArray_Impl__obj::_new(null());
HXLINE(  20)		 ::Dynamic task =  ::Dynamic(new _hx_Closure_0(array));
HXLINE(  33)		int start = ::openfl::Lib_obj::getTimer();
HXLINE(  34)		{
HXLINE(  34)			int _g = 0;
HXDLIN(  34)			while((_g < 5000)){
HXLINE(  34)				_g = (_g + 1);
HXDLIN(  34)				int i = (_g - 1);
HXLINE(  35)				this->executor->submit(::hx::concurrent::internal::_Either2::_Either2_obj::a(task),null());
            			}
            		}
HXLINE(  37)		::Dynamic result = this->executor->submit(::hx::concurrent::internal::_Either2::_Either2_obj::a(task),null());
HXLINE(  39)		while(!(::hx::concurrent::Future_obj::isComplete(result))){
            		}
HXLINE(  43)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  43)		_hx_tmp(HX_("haxe-concurrent done",a4,6b,a3,31), ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("Main",59,64,2f,33))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,(::openfl::Lib_obj::getTimer() - start)))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("new",60,d0,53,00))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("Source/Main.hx",b1,67,fd,ea))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),43)));
HXLINE(  45)		start = ::openfl::Lib_obj::getTimer();
HXLINE(  46)		{
HXLINE(  46)			int _g1 = 0;
HXDLIN(  46)			while((_g1 < 5000)){
HXLINE(  46)				_g1 = (_g1 + 1);
HXDLIN(  46)				int i1 = (_g1 - 1);
HXLINE(  47)				task();
            			}
            		}
HXLINE(  48)		 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(  48)		_hx_tmp1(HX_("native done",ab,93,0e,83), ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("Main",59,64,2f,33))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,(::openfl::Lib_obj::getTimer() - start)))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("new",60,d0,53,00))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("Source/Main.hx",b1,67,fd,ea))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),48)));
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(executor,"executor");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(executor,"executor");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"executor") ) { return ::hx::Val( executor ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Main_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"executor") ) { executor=inValue.Cast<  ::hx::concurrent::executor::Executor >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("executor",53,ed,5b,bf));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hx::concurrent::executor::Executor */ ,(int)offsetof(Main_obj,executor),HX_("executor",53,ed,5b,bf)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("executor",53,ed,5b,bf),
	::String(null()) };

::hx::Class Main_obj::__mClass;

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

