// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hx_concurrent_ConcurrentException
#include <hx/concurrent/ConcurrentException.h>
#endif
#ifndef INCLUDED_hx_concurrent_Future
#include <hx/concurrent/Future.h>
#endif
#ifndef INCLUDED_hx_concurrent_FutureResult
#include <hx/concurrent/FutureResult.h>
#endif
#ifndef INCLUDED_hx_concurrent_Service
#include <hx/concurrent/Service.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceBase
#include <hx/concurrent/ServiceBase.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection_Collection
#include <hx/concurrent/collection/Collection.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection_OrderedCollection
#include <hx/concurrent/collection/OrderedCollection.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection__CopyOnWriteArray_CopyOnWriteArrayImpl
#include <hx/concurrent/collection/_CopyOnWriteArray/CopyOnWriteArrayImpl.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection__CopyOnWriteArray_CopyOnWriteArray_Impl_
#include <hx/concurrent/collection/_CopyOnWriteArray/CopyOnWriteArray_Impl_.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_Executor
#include <hx/concurrent/executor/Executor.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_Schedule
#include <hx/concurrent/executor/Schedule.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_TaskFuture
#include <hx/concurrent/executor/TaskFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_ThreadPoolExecutor
#include <hx/concurrent/executor/ThreadPoolExecutor.h>
#endif
#ifndef INCLUDED_hx_concurrent_internal__Either2__Either2
#include <hx/concurrent/internal/_Either2/_Either2.h>
#endif
#ifndef INCLUDED_hx_concurrent_internal__Either3__Either3
#include <hx/concurrent/internal/_Either3/_Either3.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_90b26094ee0040e2_23_new,"hx.concurrent.executor.Executor","new",0x6b259987,"hx.concurrent.executor.Executor.new","hx/concurrent/executor/Executor.hx",23,0xb24f9f08)
HX_LOCAL_STACK_FRAME(_hx_pos_90b26094ee0040e2_44_notifyResult,"hx.concurrent.executor.Executor","notifyResult",0x6cd0ce7f,"hx.concurrent.executor.Executor.notifyResult","hx/concurrent/executor/Executor.hx",44,0xb24f9f08)
HX_LOCAL_STACK_FRAME(_hx_pos_90b26094ee0040e2_63_onCompletion,"hx.concurrent.executor.Executor","onCompletion",0xd120c714,"hx.concurrent.executor.Executor.onCompletion","hx/concurrent/executor/Executor.hx",63,0xb24f9f08)
HX_LOCAL_STACK_FRAME(_hx_pos_90b26094ee0040e2_83_stop,"hx.concurrent.executor.Executor","stop",0x591a28fb,"hx.concurrent.executor.Executor.stop","hx/concurrent/executor/Executor.hx",83,0xb24f9f08)
HX_LOCAL_STACK_FRAME(_hx_pos_90b26094ee0040e2_36_create,"hx.concurrent.executor.Executor","create",0xdf889035,"hx.concurrent.executor.Executor.create","hx/concurrent/executor/Executor.hx",36,0xb24f9f08)
HX_LOCAL_STACK_FRAME(_hx_pos_90b26094ee0040e2_25_boot,"hx.concurrent.executor.Executor","boot",0x4dd9bd2b,"hx.concurrent.executor.Executor.boot","hx/concurrent/executor/Executor.hx",25,0xb24f9f08)
namespace hx{
namespace concurrent{
namespace executor{

void Executor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_90b26094ee0040e2_23_new)
HXLINE(  41)		this->completionListeners = ::hx::concurrent::collection::_CopyOnWriteArray::CopyOnWriteArray_Impl__obj::_new(null());
HXLINE(  23)		super::__construct();
            	}

bool Executor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7b12badf) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x7b12badf;
	} else {
		return inClassId==(int)0x7e2f004d;
	}
}

void Executor_obj::notifyResult( ::hx::concurrent::FutureResult result){
            	HX_STACKFRAME(&_hx_pos_90b26094ee0040e2_44_notifyResult)
HXLINE(  45)		{
HXLINE(  45)			int listener_current = 0;
HXDLIN(  45)			::Array< ::Dynamic> listener_array = this->completionListeners->_items;
HXDLIN(  45)			while((listener_current < listener_array->length)){
HXLINE(  45)				listener_current = (listener_current + 1);
HXDLIN(  45)				 ::Dynamic listener = listener_array->__get((listener_current - 1));
HXLINE(  46)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  47)					listener(result);
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(  48)						 ::haxe::Exception ex = ::haxe::Exception_obj::caught(_g);
HXLINE(  49)						::haxe::Log_obj::trace(ex,::hx::SourceInfo(HX_("hx/concurrent/executor/Executor.hx",08,9f,4f,b2),49,HX_("hx.concurrent.executor.Executor",15,ca,d2,72),HX_("notifyResult",86,74,4b,76)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(  51)		if ((this->completionListeners->_items->get_length() == 0)) {
HXLINE(  51)			if ((result->_hx_getIndex() == 1)) {
HXLINE(  52)				Float _g1 = result->_hx_getFloat(1);
HXDLIN(  52)				::Dynamic _g2 = result->_hx_getObject(2);
HXDLIN(  52)				{
HXLINE(  52)					 ::hx::concurrent::ConcurrentException ex1 = result->_hx_getObject(0).StaticCast<  ::hx::concurrent::ConcurrentException >();
HXDLIN(  52)					::haxe::Log_obj::trace(ex1,::hx::SourceInfo(HX_("hx/concurrent/executor/Executor.hx",08,9f,4f,b2),52,HX_("hx.concurrent.executor.Executor",15,ca,d2,72),HX_("notifyResult",86,74,4b,76)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Executor_obj,notifyResult,(void))

void Executor_obj::onCompletion( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_90b26094ee0040e2_63_onCompletion)
HXDLIN(  63)		this->completionListeners->add(listener);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Executor_obj,onCompletion,(void))

HX_DEFINE_DYNAMIC_FUNC2(Executor_obj,submit,return )

void Executor_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_90b26094ee0040e2_83_stop)
HXDLIN(  83)		this->super::stop();
            	}


 ::hx::concurrent::executor::Schedule Executor_obj::NOW_ONCE;

 ::hx::concurrent::executor::Executor Executor_obj::create(::hx::Null< int >  __o_maxConcurrent,::hx::Null< bool >  __o_autostart){
            		int maxConcurrent = __o_maxConcurrent.Default(1);
            		bool autostart = __o_autostart.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_90b26094ee0040e2_36_create)
HXDLIN(  36)		return  ::hx::concurrent::executor::ThreadPoolExecutor_obj::__alloc( HX_CTX ,maxConcurrent,autostart);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Executor_obj,create,return )


Executor_obj::Executor_obj()
{
}

void Executor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Executor);
	HX_MARK_MEMBER_NAME(completionListeners,"completionListeners");
	 ::hx::concurrent::ServiceBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Executor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(completionListeners,"completionListeners");
	 ::hx::concurrent::ServiceBase_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Executor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"submit") ) { return ::hx::Val( submit_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"notifyResult") ) { return ::hx::Val( notifyResult_dyn() ); }
		if (HX_FIELD_EQ(inName,"onCompletion") ) { return ::hx::Val( onCompletion_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"completionListeners") ) { return ::hx::Val( completionListeners ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Executor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"NOW_ONCE") ) { outValue = ( NOW_ONCE ); return true; }
	}
	return false;
}

::hx::Val Executor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"completionListeners") ) { completionListeners=inValue.Cast<  ::hx::concurrent::collection::_CopyOnWriteArray::CopyOnWriteArrayImpl >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Executor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"NOW_ONCE") ) { NOW_ONCE=ioValue.Cast<  ::hx::concurrent::executor::Schedule >(); return true; }
	}
	return false;
}

void Executor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("completionListeners",c3,36,5d,25));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Executor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hx::concurrent::collection::_CopyOnWriteArray::CopyOnWriteArrayImpl */ ,(int)offsetof(Executor_obj,completionListeners),HX_("completionListeners",c3,36,5d,25)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Executor_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::hx::concurrent::executor::Schedule */ ,(void *) &Executor_obj::NOW_ONCE,HX_("NOW_ONCE",aa,30,0f,f3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Executor_obj_sMemberFields[] = {
	HX_("completionListeners",c3,36,5d,25),
	HX_("notifyResult",86,74,4b,76),
	HX_("onCompletion",1b,6d,9b,da),
	HX_("submit",18,58,06,9a),
	HX_("stop",02,f0,5b,4c),
	::String(null()) };

static void Executor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Executor_obj::NOW_ONCE,"NOW_ONCE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Executor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Executor_obj::NOW_ONCE,"NOW_ONCE");
};

#endif

::hx::Class Executor_obj::__mClass;

static ::String Executor_obj_sStaticFields[] = {
	HX_("NOW_ONCE",aa,30,0f,f3),
	HX_("create",fc,66,0f,7c),
	::String(null())
};

void Executor_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.executor.Executor",15,ca,d2,72);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &Executor_obj::__GetStatic;
	__mClass->mSetStaticField = &Executor_obj::__SetStatic;
	__mClass->mMarkFunc = Executor_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Executor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Executor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Executor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Executor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Executor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Executor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Executor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_90b26094ee0040e2_25_boot)
HXDLIN(  25)		NOW_ONCE = ::hx::concurrent::executor::Schedule_obj::ONCE(0);
            	}
}

} // end namespace hx
} // end namespace concurrent
} // end namespace executor
