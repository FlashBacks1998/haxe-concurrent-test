// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_hx_concurrent_Future
#include <hx/concurrent/Future.h>
#endif
#ifndef INCLUDED_hx_concurrent_FutureResult
#include <hx/concurrent/FutureResult.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_Schedule
#include <hx/concurrent/executor/Schedule.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_TaskFuture
#include <hx/concurrent/executor/TaskFuture.h>
#endif

namespace hx{
namespace concurrent{
namespace executor{


static ::String TaskFuture_obj_sMemberFields[] = {
	HX_("schedule",57,ca,7e,c5),
	HX_("isStopped",43,4f,60,47),
	HX_("cancel",7a,ed,33,b8),
	HX_("awaitCompletion",12,36,2e,b5),
	::String(null()) };

::hx::Class TaskFuture_obj::__mClass;

void TaskFuture_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.executor.TaskFuture",aa,1e,b5,6e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TaskFuture_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TIsInterface< (int)0x5801c022 >;
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace concurrent
} // end namespace executor
