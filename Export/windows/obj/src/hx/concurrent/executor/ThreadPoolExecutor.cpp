// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_hx_concurrent_AbstractFuture
#include <hx/concurrent/AbstractFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_CompletableFuture
#include <hx/concurrent/CompletableFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_Future
#include <hx/concurrent/Future.h>
#endif
#ifndef INCLUDED_hx_concurrent_Service
#include <hx/concurrent/Service.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceBase
#include <hx/concurrent/ServiceBase.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceState
#include <hx/concurrent/ServiceState.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection_Queue
#include <hx/concurrent/collection/Queue.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_AbstractTaskFuture
#include <hx/concurrent/executor/AbstractTaskFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_Executor
#include <hx/concurrent/executor/Executor.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_Schedule
#include <hx/concurrent/executor/Schedule.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_TaskFuture
#include <hx/concurrent/executor/TaskFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_ThreadPoolExecutor
#include <hx/concurrent/executor/ThreadPoolExecutor.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor__ThreadPoolExecutor_TaskFutureImpl
#include <hx/concurrent/executor/_ThreadPoolExecutor/TaskFutureImpl.h>
#endif
#ifndef INCLUDED_hx_concurrent_internal__Either2__Either2
#include <hx/concurrent/internal/_Either2/_Either2.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_AbstractAcquirable
#include <hx/concurrent/lock/AbstractAcquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_Acquirable
#include <hx/concurrent/lock/Acquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_RLock
#include <hx/concurrent/lock/RLock.h>
#endif
#ifndef INCLUDED_hx_concurrent_thread_ThreadContext
#include <hx/concurrent/thread/ThreadContext.h>
#endif
#ifndef INCLUDED_hx_concurrent_thread_ThreadPool
#include <hx/concurrent/thread/ThreadPool.h>
#endif
#ifndef INCLUDED_hx_concurrent_thread_Threads
#include <hx/concurrent/thread/Threads.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_75bccc70064b21e1_24_new,"hx.concurrent.executor.ThreadPoolExecutor","new",0xf109d1ed,"hx.concurrent.executor.ThreadPoolExecutor.new","hx/concurrent/executor/ThreadPoolExecutor.hx",24,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_117_onStart,"hx.concurrent.executor.ThreadPoolExecutor","onStart",0x34135ed0,"hx.concurrent.executor.ThreadPoolExecutor.onStart","hx/concurrent/executor/ThreadPoolExecutor.hx",117,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_56_onStart,"hx.concurrent.executor.ThreadPoolExecutor","onStart",0x34135ed0,"hx.concurrent.executor.ThreadPoolExecutor.onStart","hx/concurrent/executor/ThreadPoolExecutor.hx",56,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_66_onStart,"hx.concurrent.executor.ThreadPoolExecutor","onStart",0x34135ed0,"hx.concurrent.executor.ThreadPoolExecutor.onStart","hx/concurrent/executor/ThreadPoolExecutor.hx",66,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_49_onStart,"hx.concurrent.executor.ThreadPoolExecutor","onStart",0x34135ed0,"hx.concurrent.executor.ThreadPoolExecutor.onStart","hx/concurrent/executor/ThreadPoolExecutor.hx",49,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_125_submit,"hx.concurrent.executor.ThreadPoolExecutor","submit",0x857a0cab,"hx.concurrent.executor.ThreadPoolExecutor.submit","hx/concurrent/executor/ThreadPoolExecutor.hx",125,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_135_submit,"hx.concurrent.executor.ThreadPoolExecutor","submit",0x857a0cab,"hx.concurrent.executor.ThreadPoolExecutor.submit","hx/concurrent/executor/ThreadPoolExecutor.hx",135,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_123_submit,"hx.concurrent.executor.ThreadPoolExecutor","submit",0x857a0cab,"hx.concurrent.executor.ThreadPoolExecutor.submit","hx/concurrent/executor/ThreadPoolExecutor.hx",123,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_150_stop,"hx.concurrent.executor.ThreadPoolExecutor","stop",0xfae749d5,"hx.concurrent.executor.ThreadPoolExecutor.stop","hx/concurrent/executor/ThreadPoolExecutor.hx",150,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_149_stop,"hx.concurrent.executor.ThreadPoolExecutor","stop",0xfae749d5,"hx.concurrent.executor.ThreadPoolExecutor.stop","hx/concurrent/executor/ThreadPoolExecutor.hx",149,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_26_boot,"hx.concurrent.executor.ThreadPoolExecutor","boot",0xefa6de05,"hx.concurrent.executor.ThreadPoolExecutor.boot","hx/concurrent/executor/ThreadPoolExecutor.hx",26,0x82271a22)
HX_LOCAL_STACK_FRAME(_hx_pos_75bccc70064b21e1_27_boot,"hx.concurrent.executor.ThreadPoolExecutor","boot",0xefa6de05,"hx.concurrent.executor.ThreadPoolExecutor.boot","hx/concurrent/executor/ThreadPoolExecutor.hx",27,0x82271a22)
namespace hx{
namespace concurrent{
namespace executor{

void ThreadPoolExecutor_obj::__construct(int threadPoolSize,::hx::Null< bool >  __o_autostart){
            		bool autostart = __o_autostart.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_75bccc70064b21e1_24_new)
HXLINE(  32)		this->_newScheduledTasks =  ::hx::concurrent::collection::Queue_obj::__alloc( HX_CTX );
HXLINE(  31)		this->_scheduledTasks = ::Array_obj< ::Dynamic>::__new();
HXLINE(  36)		if ((threadPoolSize < 1)) {
HXLINE(  37)			HX_STACK_DO_THROW(HX_("[threadPoolSize] must be > 0",63,60,b3,c2));
            		}
HXLINE(  39)		super::__construct();
HXLINE(  41)		this->_threadPool =  ::hx::concurrent::thread::ThreadPool_obj::__alloc( HX_CTX ,threadPoolSize,autostart);
HXLINE(  43)		if (autostart) {
HXLINE(  44)			this->start();
            		}
            	}

Dynamic ThreadPoolExecutor_obj::__CreateEmpty() { return new ThreadPoolExecutor_obj; }

void *ThreadPoolExecutor_obj::_hx_vtable = 0;

Dynamic ThreadPoolExecutor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ThreadPoolExecutor_obj > _hx_result = new ThreadPoolExecutor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ThreadPoolExecutor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7d02fb17) {
		if (inClassId<=(int)0x7b12badf) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x7b12badf;
		} else {
			return inClassId==(int)0x7d02fb17;
		}
	} else {
		return inClassId==(int)0x7e2f004d;
	}
}

void ThreadPoolExecutor_obj::onStart(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::hx::concurrent::executor::ThreadPoolExecutor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::hx::concurrent::executor::ThreadPoolExecutor,_gthis) HXARGC(0)
            			bool _hx_run(){
            				HX_STACKFRAME(&_hx_pos_75bccc70064b21e1_117_onStart)
HXLINE( 117)				return ::hx::IsPointerEq( _gthis->_threadPool->state,::hx::concurrent::ServiceState_obj::STOPPED_dyn() );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_STACKFRAME(&_hx_pos_75bccc70064b21e1_56_onStart)
HXLINE(  58)			::Array< ::Dynamic> doneTasks = ::Array_obj< ::Dynamic>::__new();
HXLINE(  60)			while(::hx::IsPointerEq( _gthis->state,::hx::concurrent::ServiceState_obj::RUNNING_dyn() )){
HXLINE(  64)				{
HXLINE(  64)					int _g = 0;
HXDLIN(  64)					::Array< ::Dynamic> _g1 = _gthis->_scheduledTasks;
HXDLIN(  64)					while((_g < _g1->length)){
HXLINE(  64)						 ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl t = _g1->__get(_g).StaticCast<  ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl >();
HXDLIN(  64)						_g = (_g + 1);
HXLINE(  65)						if (t->isDue()) {
            							HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl,t) HXARGC(1)
            							void _hx_run( ::hx::concurrent::thread::ThreadContext ctx){
            								HX_STACKFRAME(&_hx_pos_75bccc70064b21e1_66_onStart)
HXLINE(  66)								t->run();
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(  66)							_gthis->_threadPool->submit( ::Dynamic(new _hx_Closure_0(t)));
            						}
            						else {
HXLINE(  67)							if (t->isStopped) {
HXLINE(  68)								doneTasks->push(t);
            							}
            						}
            					}
            				}
HXLINE(  74)				if ((doneTasks->length > 0)) {
HXLINE(  75)					{
HXLINE(  75)						int _g2 = 0;
HXDLIN(  75)						while((_g2 < doneTasks->length)){
HXLINE(  75)							 ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl t1 = doneTasks->__get(_g2).StaticCast<  ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl >();
HXDLIN(  75)							_g2 = (_g2 + 1);
HXLINE(  76)							_gthis->_scheduledTasks->remove(t1);
            						}
            					}
HXLINE(  79)					doneTasks->resize(0);
            				}
HXLINE(  85)				 ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl t2 = _gthis->_newScheduledTasks->pop(null()).StaticCast<  ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl >();
HXLINE(  86)				if (::hx::IsNull( t2 )) {
HXLINE(  87)					::Sys_obj::sleep(((Float)0.01));
HXLINE(  88)					continue;
            				}
HXLINE(  91)				Float startAt = (::Sys_obj::time() * ( (Float)(1000) ));
HXLINE(  92)				_gthis->_scheduledTasks->push(t2);
HXLINE(  94)				while(!((((::Sys_obj::time() * ( (Float)(1000) )) - startAt) > 10))){
HXLINE(  99)					 ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl t3 = _gthis->_newScheduledTasks->pop(null()).StaticCast<  ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl >();
HXLINE( 100)					if (::hx::IsNull( t3 )) {
HXLINE( 101)						goto _hx_goto_4;
            					}
HXLINE( 102)					_gthis->_scheduledTasks->push(t3);
            				}
            				_hx_goto_4:;
            			}
HXLINE( 109)			{
HXLINE( 109)				int _g3 = 0;
HXDLIN( 109)				::Array< ::Dynamic> _g4 = _gthis->_scheduledTasks;
HXDLIN( 109)				while((_g3 < _g4->length)){
HXLINE( 109)					 ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl t4 = _g4->__get(_g3).StaticCast<  ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl >();
HXDLIN( 109)					_g3 = (_g3 + 1);
HXLINE( 110)					t4->cancel();
            				}
            			}
HXLINE( 111)			while(true){
HXLINE( 112)				 ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl t5 = _gthis->_newScheduledTasks->pop(null()).StaticCast<  ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl >();
HXLINE( 113)				if (::hx::IsNull( t5 )) {
HXLINE( 113)					goto _hx_goto_6;
            				}
HXLINE( 114)				t5->cancel();
            			}
            			_hx_goto_6:;
HXLINE( 117)			::hx::concurrent::thread::Threads_obj::await( ::Dynamic(new _hx_Closure_1(_gthis)),-1,null());
HXLINE( 118)			_gthis->set_state(::hx::concurrent::ServiceState_obj::STOPPED_dyn());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_75bccc70064b21e1_49_onStart)
HXDLIN(  49)		 ::hx::concurrent::executor::ThreadPoolExecutor _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  51)		this->set_state(::hx::concurrent::ServiceState_obj::RUNNING_dyn());
HXLINE(  56)		::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_2(_gthis)),false);
            	}


::Dynamic ThreadPoolExecutor_obj::submit( ::hx::concurrent::internal::_Either2::_Either2 task, ::hx::concurrent::executor::Schedule schedule){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::hx::concurrent::executor::ThreadPoolExecutor,_gthis, ::hx::concurrent::internal::_Either2::_Either2,task, ::hx::concurrent::executor::Schedule,schedule1) HXARGC(0)
            		 ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_75bccc70064b21e1_125_submit)
HXLINE( 126)			if (::hx::IsPointerNotEq( _gthis->state,::hx::concurrent::ServiceState_obj::RUNNING_dyn() )) {
HXLINE( 127)				HX_STACK_DO_THROW(((HX_("Cannot accept new tasks. Executor is not in state [RUNNING] but [",06,f5,6c,89) + ::Std_obj::string(_gthis->state)) + HX_("].",31,51,00,00)));
            			}
HXLINE( 129)			 ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl future =  ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl_obj::__alloc( HX_CTX ,_gthis,task,schedule1);
HXLINE( 132)			if ((schedule1->_hx_getIndex() == 0)) {
HXLINE( 133)				 ::Dynamic _g = schedule1->_hx_getObject(0);
HXLINE( 134)				if (future->isDue()) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl,future) HXARGC(1)
            					void _hx_run( ::hx::concurrent::thread::ThreadContext ctx){
            						HX_GC_STACKFRAME(&_hx_pos_75bccc70064b21e1_135_submit)
HXLINE( 135)						future->run();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 135)					_gthis->_threadPool->submit( ::Dynamic(new _hx_Closure_0(future)));
HXLINE( 136)					return future;
            				}
            			}
HXLINE( 141)			_gthis->_newScheduledTasks->push(future);
HXLINE( 142)			return future;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_75bccc70064b21e1_123_submit)
HXDLIN( 123)		 ::hx::concurrent::executor::ThreadPoolExecutor _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 124)		 ::hx::concurrent::executor::Schedule schedule1;
HXDLIN( 124)		if (::hx::IsNull( schedule )) {
HXLINE( 124)			schedule1 = ::hx::concurrent::executor::Executor_obj::NOW_ONCE;
            		}
            		else {
HXLINE( 124)			schedule1 = schedule;
            		}
HXLINE( 125)		return this->_stateLock->execute( ::Dynamic(new _hx_Closure_1(_gthis,task,schedule1)),null()).StaticCast<  ::hx::concurrent::executor::_ThreadPoolExecutor::TaskFutureImpl >();
            	}


void ThreadPoolExecutor_obj::stop(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::executor::ThreadPoolExecutor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_75bccc70064b21e1_150_stop)
HXLINE( 150)			if (::hx::IsPointerEq( _gthis->state,::hx::concurrent::ServiceState_obj::RUNNING_dyn() )) {
HXLINE( 151)				_gthis->set_state(::hx::concurrent::ServiceState_obj::STOPPING_dyn());
HXLINE( 153)				_gthis->_threadPool->stop();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_75bccc70064b21e1_149_stop)
HXDLIN( 149)		 ::hx::concurrent::executor::ThreadPoolExecutor _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 149)		this->_stateLock->execute( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


int ThreadPoolExecutor_obj::SCHEDULER_RESOLUTION_MS;

Float ThreadPoolExecutor_obj::SCHEDULER_RESOLUTION_SEC;


::hx::ObjectPtr< ThreadPoolExecutor_obj > ThreadPoolExecutor_obj::__new(int threadPoolSize,::hx::Null< bool >  __o_autostart) {
	::hx::ObjectPtr< ThreadPoolExecutor_obj > __this = new ThreadPoolExecutor_obj();
	__this->__construct(threadPoolSize,__o_autostart);
	return __this;
}

::hx::ObjectPtr< ThreadPoolExecutor_obj > ThreadPoolExecutor_obj::__alloc(::hx::Ctx *_hx_ctx,int threadPoolSize,::hx::Null< bool >  __o_autostart) {
	ThreadPoolExecutor_obj *__this = (ThreadPoolExecutor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ThreadPoolExecutor_obj), true, "hx.concurrent.executor.ThreadPoolExecutor"));
	*(void **)__this = ThreadPoolExecutor_obj::_hx_vtable;
	__this->__construct(threadPoolSize,__o_autostart);
	return __this;
}

ThreadPoolExecutor_obj::ThreadPoolExecutor_obj()
{
}

void ThreadPoolExecutor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ThreadPoolExecutor);
	HX_MARK_MEMBER_NAME(_threadPool,"_threadPool");
	HX_MARK_MEMBER_NAME(_scheduledTasks,"_scheduledTasks");
	HX_MARK_MEMBER_NAME(_newScheduledTasks,"_newScheduledTasks");
	 ::hx::concurrent::executor::Executor_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ThreadPoolExecutor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_threadPool,"_threadPool");
	HX_VISIT_MEMBER_NAME(_scheduledTasks,"_scheduledTasks");
	HX_VISIT_MEMBER_NAME(_newScheduledTasks,"_newScheduledTasks");
	 ::hx::concurrent::executor::Executor_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ThreadPoolExecutor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"submit") ) { return ::hx::Val( submit_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onStart") ) { return ::hx::Val( onStart_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_threadPool") ) { return ::hx::Val( _threadPool ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_scheduledTasks") ) { return ::hx::Val( _scheduledTasks ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_newScheduledTasks") ) { return ::hx::Val( _newScheduledTasks ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ThreadPoolExecutor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"_threadPool") ) { _threadPool=inValue.Cast<  ::hx::concurrent::thread::ThreadPool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_scheduledTasks") ) { _scheduledTasks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_newScheduledTasks") ) { _newScheduledTasks=inValue.Cast<  ::hx::concurrent::collection::Queue >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ThreadPoolExecutor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_threadPool",e5,21,af,18));
	outFields->push(HX_("_scheduledTasks",c0,10,ac,ec));
	outFields->push(HX_("_newScheduledTasks",62,b9,72,3c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ThreadPoolExecutor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hx::concurrent::thread::ThreadPool */ ,(int)offsetof(ThreadPoolExecutor_obj,_threadPool),HX_("_threadPool",e5,21,af,18)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ThreadPoolExecutor_obj,_scheduledTasks),HX_("_scheduledTasks",c0,10,ac,ec)},
	{::hx::fsObject /*  ::hx::concurrent::collection::Queue */ ,(int)offsetof(ThreadPoolExecutor_obj,_newScheduledTasks),HX_("_newScheduledTasks",62,b9,72,3c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ThreadPoolExecutor_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &ThreadPoolExecutor_obj::SCHEDULER_RESOLUTION_MS,HX_("SCHEDULER_RESOLUTION_MS",75,af,94,4e)},
	{::hx::fsFloat,(void *) &ThreadPoolExecutor_obj::SCHEDULER_RESOLUTION_SEC,HX_("SCHEDULER_RESOLUTION_SEC",82,58,89,73)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ThreadPoolExecutor_obj_sMemberFields[] = {
	HX_("_threadPool",e5,21,af,18),
	HX_("_scheduledTasks",c0,10,ac,ec),
	HX_("_newScheduledTasks",62,b9,72,3c),
	HX_("onStart",c3,12,49,1a),
	HX_("submit",18,58,06,9a),
	HX_("stop",02,f0,5b,4c),
	::String(null()) };

static void ThreadPoolExecutor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ThreadPoolExecutor_obj::SCHEDULER_RESOLUTION_MS,"SCHEDULER_RESOLUTION_MS");
	HX_MARK_MEMBER_NAME(ThreadPoolExecutor_obj::SCHEDULER_RESOLUTION_SEC,"SCHEDULER_RESOLUTION_SEC");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ThreadPoolExecutor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ThreadPoolExecutor_obj::SCHEDULER_RESOLUTION_MS,"SCHEDULER_RESOLUTION_MS");
	HX_VISIT_MEMBER_NAME(ThreadPoolExecutor_obj::SCHEDULER_RESOLUTION_SEC,"SCHEDULER_RESOLUTION_SEC");
};

#endif

::hx::Class ThreadPoolExecutor_obj::__mClass;

static ::String ThreadPoolExecutor_obj_sStaticFields[] = {
	HX_("SCHEDULER_RESOLUTION_MS",75,af,94,4e),
	HX_("SCHEDULER_RESOLUTION_SEC",82,58,89,73),
	::String(null())
};

void ThreadPoolExecutor_obj::__register()
{
	ThreadPoolExecutor_obj _hx_dummy;
	ThreadPoolExecutor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.executor.ThreadPoolExecutor",7b,57,0d,19);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ThreadPoolExecutor_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ThreadPoolExecutor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ThreadPoolExecutor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ThreadPoolExecutor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ThreadPoolExecutor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ThreadPoolExecutor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ThreadPoolExecutor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ThreadPoolExecutor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_75bccc70064b21e1_26_boot)
HXDLIN(  26)		SCHEDULER_RESOLUTION_MS = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_75bccc70064b21e1_27_boot)
HXDLIN(  27)		SCHEDULER_RESOLUTION_SEC = ((Float)0.01);
            	}
}

} // end namespace hx
} // end namespace concurrent
} // end namespace executor
