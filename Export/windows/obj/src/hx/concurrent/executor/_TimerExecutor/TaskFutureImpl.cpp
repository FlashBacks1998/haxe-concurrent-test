// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_hx_concurrent_AbstractFuture
#include <hx/concurrent/AbstractFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_CompletableFuture
#include <hx/concurrent/CompletableFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_ConcurrentException
#include <hx/concurrent/ConcurrentException.h>
#endif
#ifndef INCLUDED_hx_concurrent_Future
#include <hx/concurrent/Future.h>
#endif
#ifndef INCLUDED_hx_concurrent_FutureResult
#include <hx/concurrent/FutureResult.h>
#endif
#ifndef INCLUDED_hx_concurrent_Service
#include <hx/concurrent/Service.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceBase
#include <hx/concurrent/ServiceBase.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_AbstractTaskFuture
#include <hx/concurrent/executor/AbstractTaskFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_Executor
#include <hx/concurrent/executor/Executor.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_Schedule
#include <hx/concurrent/executor/Schedule.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_ScheduleTools
#include <hx/concurrent/executor/ScheduleTools.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_TaskFuture
#include <hx/concurrent/executor/TaskFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor_TimerExecutor
#include <hx/concurrent/executor/TimerExecutor.h>
#endif
#ifndef INCLUDED_hx_concurrent_executor__TimerExecutor_TaskFutureImpl
#include <hx/concurrent/executor/_TimerExecutor/TaskFutureImpl.h>
#endif
#ifndef INCLUDED_hx_concurrent_internal__Either2__Either2
#include <hx/concurrent/internal/_Either2/_Either2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3aaee638543b3479_67_new,"hx.concurrent.executor._TimerExecutor.TaskFutureImpl","new",0xffac258d,"hx.concurrent.executor._TimerExecutor.TaskFutureImpl.new","hx/concurrent/executor/TimerExecutor.hx",67,0x40659ea9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aaee638543b3479_79_run,"hx.concurrent.executor._TimerExecutor.TaskFutureImpl","run",0xffaf3c78,"hx.concurrent.executor._TimerExecutor.TaskFutureImpl.run","hx/concurrent/executor/TimerExecutor.hx",79,0x40659ea9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aaee638543b3479_117_cancel,"hx.concurrent.executor._TimerExecutor.TaskFutureImpl","cancel",0x2cbd526d,"hx.concurrent.executor._TimerExecutor.TaskFutureImpl.cancel","hx/concurrent/executor/TimerExecutor.hx",117,0x40659ea9)
namespace hx{
namespace concurrent{
namespace executor{
namespace _TimerExecutor{

void TaskFutureImpl_obj::__construct( ::hx::concurrent::executor::TimerExecutor executor, ::hx::concurrent::internal::_Either2::_Either2 task, ::hx::concurrent::executor::Schedule schedule){
            	HX_STACKFRAME(&_hx_pos_3aaee638543b3479_67_new)
HXLINE(  68)		super::__construct(executor,task,schedule);
HXLINE(  69)		Float initialDelay = ::hx::concurrent::executor::ScheduleTools_obj::firstRunAt(this->schedule);
HXDLIN(  69)		int initialDelay1 = ::Std_obj::_hx_int((initialDelay - (::Sys_obj::time() * ( (Float)(1000) ))));
HXLINE(  73)		if ((initialDelay1 < 0)) {
HXLINE(  73)			initialDelay1 = 0;
            		}
HXLINE(  75)		::haxe::Timer_obj::delay(this->run_dyn(),initialDelay1);
            	}

Dynamic TaskFutureImpl_obj::__CreateEmpty() { return new TaskFutureImpl_obj; }

void *TaskFutureImpl_obj::_hx_vtable = 0;

Dynamic TaskFutureImpl_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TaskFutureImpl_obj > _hx_result = new TaskFutureImpl_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TaskFutureImpl_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x580ae5fb) {
		if (inClassId<=(int)0x1af78b62) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1af78b62;
		} else {
			return inClassId==(int)0x580ae5fb;
		}
	} else {
		return inClassId==(int)0x77d6e8d0 || inClassId==(int)0x7b9c8b84;
	}
}

void TaskFutureImpl_obj::run(){
            	HX_GC_STACKFRAME(&_hx_pos_3aaee638543b3479_79_run)
HXLINE(  80)		if (this->isStopped) {
HXLINE(  81)			return;
            		}
HXLINE(  83)		if (::hx::IsNull( this->_timer )) {
HXLINE(  84)			 ::haxe::Timer t = null();
HXLINE(  85)			{
HXLINE(  85)				 ::hx::concurrent::executor::Schedule _g = this->schedule;
HXDLIN(  85)				switch((int)(_g->_hx_getIndex())){
            					case (int)2: {
HXLINE(  86)						 ::Dynamic _g1 = _g->_hx_getObject(1);
HXDLIN(  86)						{
HXLINE(  86)							int intervalMS = _g->_hx_getInt(0);
HXDLIN(  86)							{
HXLINE(  86)								t =  ::haxe::Timer_obj::__alloc( HX_CTX ,( (Float)(intervalMS) ));
HXDLIN(  86)								t->run = this->run_dyn();
            							}
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(  87)						 ::Dynamic _g2 = _g->_hx_getObject(0);
HXDLIN(  87)						 ::Dynamic _g3 = _g->_hx_getObject(1);
HXDLIN(  87)						{
HXLINE(  87)							t =  ::haxe::Timer_obj::__alloc( HX_CTX ,( (Float)(3600000) ));
HXDLIN(  87)							t->run = this->run_dyn();
            						}
            					}
            					break;
            					case (int)4: {
HXLINE(  88)						 ::Dynamic _g4 = _g->_hx_getObject(0);
HXDLIN(  88)						 ::Dynamic _g5 = _g->_hx_getObject(1);
HXDLIN(  88)						 ::Dynamic _g6 = _g->_hx_getObject(2);
HXDLIN(  88)						{
HXLINE(  88)							t =  ::haxe::Timer_obj::__alloc( HX_CTX ,( (Float)(86400000) ));
HXDLIN(  88)							t->run = this->run_dyn();
            						}
            					}
            					break;
            					case (int)5: {
HXLINE(  89)						 ::Dynamic _g7 = _g->_hx_getObject(0);
HXDLIN(  89)						 ::Dynamic _g8 = _g->_hx_getObject(1);
HXDLIN(  89)						 ::Dynamic _g9 = _g->_hx_getObject(2);
HXDLIN(  89)						 ::Dynamic _g10 = _g->_hx_getObject(3);
HXDLIN(  89)						{
HXLINE(  89)							t =  ::haxe::Timer_obj::__alloc( HX_CTX ,( (Float)(604800000) ));
HXDLIN(  89)							t->run = this->run_dyn();
            						}
            					}
            					break;
            					default:{
            					}
            				}
            			}
HXLINE(  92)			this->_timer = t;
            		}
HXLINE(  95)		 ::hx::concurrent::internal::_Either2::_Either2 fnResult;
HXLINE(  96)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  97)			 ::hx::concurrent::internal::_Either2::_Either2 _g11 = this->_task;
HXDLIN(  97)			switch((int)(_g11->_hx_getIndex())){
            				case (int)0: {
HXLINE(  98)					 ::Dynamic functionWithReturnValue = _g11->_hx_getObject(0);
HXDLIN(  98)					fnResult = ::hx::concurrent::internal::_Either2::_Either2_obj::a(functionWithReturnValue());
            				}
            				break;
            				case (int)1: {
HXLINE(  99)					 ::Dynamic functionWithoutReturnValue = _g11->_hx_getObject(0);
HXDLIN(  99)					functionWithoutReturnValue();
HXDLIN(  99)					fnResult = null();
            				}
            				break;
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g12 = _hx_e;
HXLINE( 101)				 ::haxe::Exception ex = ::haxe::Exception_obj::caught(_g12);
HXLINE( 102)				fnResult = ::hx::concurrent::internal::_Either2::_Either2_obj::b( ::hx::concurrent::ConcurrentException_obj::__alloc( HX_CTX ,ex));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 105)		{
HXLINE( 105)			 ::hx::concurrent::executor::Schedule _g13 = this->schedule;
HXDLIN( 105)			switch((int)(_g13->_hx_getIndex())){
            				case (int)0: {
HXLINE( 106)					 ::Dynamic _g14 = _g13->_hx_getObject(0);
HXDLIN( 106)					this->isStopped = true;
            				}
            				break;
            				case (int)1: {
HXLINE( 107)					 ::Dynamic _g15 = _g13->_hx_getObject(1);
HXDLIN( 107)					{
HXLINE( 107)						int intervalMS1 = _g13->_hx_getInt(0);
HXDLIN( 107)						this->_timer = ::haxe::Timer_obj::delay(this->run_dyn(),intervalMS1);
            					}
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 111)		this->complete(fnResult,true);
HXLINE( 112)		this->_executor->notifyResult(this->result);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TaskFutureImpl_obj,run,(void))

void TaskFutureImpl_obj::cancel(){
            	HX_STACKFRAME(&_hx_pos_3aaee638543b3479_117_cancel)
HXLINE( 118)		 ::haxe::Timer t = this->_timer;
HXLINE( 119)		if (::hx::IsNotNull( t )) {
HXLINE( 119)			t->stop();
            		}
HXLINE( 120)		this->super::cancel();
            	}



::hx::ObjectPtr< TaskFutureImpl_obj > TaskFutureImpl_obj::__new( ::hx::concurrent::executor::TimerExecutor executor, ::hx::concurrent::internal::_Either2::_Either2 task, ::hx::concurrent::executor::Schedule schedule) {
	::hx::ObjectPtr< TaskFutureImpl_obj > __this = new TaskFutureImpl_obj();
	__this->__construct(executor,task,schedule);
	return __this;
}

::hx::ObjectPtr< TaskFutureImpl_obj > TaskFutureImpl_obj::__alloc(::hx::Ctx *_hx_ctx, ::hx::concurrent::executor::TimerExecutor executor, ::hx::concurrent::internal::_Either2::_Either2 task, ::hx::concurrent::executor::Schedule schedule) {
	TaskFutureImpl_obj *__this = (TaskFutureImpl_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TaskFutureImpl_obj), true, "hx.concurrent.executor._TimerExecutor.TaskFutureImpl"));
	*(void **)__this = TaskFutureImpl_obj::_hx_vtable;
	__this->__construct(executor,task,schedule);
	return __this;
}

TaskFutureImpl_obj::TaskFutureImpl_obj()
{
}

void TaskFutureImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TaskFutureImpl);
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	 ::hx::concurrent::executor::AbstractTaskFuture_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TaskFutureImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	 ::hx::concurrent::executor::AbstractTaskFuture_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TaskFutureImpl_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_timer") ) { return ::hx::Val( _timer ); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return ::hx::Val( cancel_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TaskFutureImpl_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TaskFutureImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_timer",06,07,1d,0c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TaskFutureImpl_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TaskFutureImpl_obj,_timer),HX_("_timer",06,07,1d,0c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TaskFutureImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String TaskFutureImpl_obj_sMemberFields[] = {
	HX_("_timer",06,07,1d,0c),
	HX_("run",4b,e7,56,00),
	HX_("cancel",7a,ed,33,b8),
	::String(null()) };

::hx::Class TaskFutureImpl_obj::__mClass;

void TaskFutureImpl_obj::__register()
{
	TaskFutureImpl_obj _hx_dummy;
	TaskFutureImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.executor._TimerExecutor.TaskFutureImpl",1b,5b,d5,cf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TaskFutureImpl_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TaskFutureImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TaskFutureImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TaskFutureImpl_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace concurrent
} // end namespace executor
} // end namespace _TimerExecutor
