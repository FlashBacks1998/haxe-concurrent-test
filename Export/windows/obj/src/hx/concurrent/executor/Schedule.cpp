// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_hx_concurrent_executor_Schedule
#include <hx/concurrent/executor/Schedule.h>
#endif
namespace hx{
namespace concurrent{
namespace executor{

::hx::concurrent::executor::Schedule Schedule_obj::DAILY( ::Dynamic hour, ::Dynamic minute, ::Dynamic second)
{
	return ::hx::CreateEnum< Schedule_obj >(HX_("DAILY",b9,f7,6d,52),4,3)->_hx_init(0,hour)->_hx_init(1,minute)->_hx_init(2,second);
}

::hx::concurrent::executor::Schedule Schedule_obj::FIXED_DELAY(int intervalMS, ::Dynamic initialDelayMS)
{
	return ::hx::CreateEnum< Schedule_obj >(HX_("FIXED_DELAY",f8,3e,52,5c),1,2)->_hx_init(0,intervalMS)->_hx_init(1,initialDelayMS);
}

::hx::concurrent::executor::Schedule Schedule_obj::FIXED_RATE(int intervalMS, ::Dynamic initialDelayMS)
{
	return ::hx::CreateEnum< Schedule_obj >(HX_("FIXED_RATE",eb,b4,8e,b3),2,2)->_hx_init(0,intervalMS)->_hx_init(1,initialDelayMS);
}

::hx::concurrent::executor::Schedule Schedule_obj::HOURLY( ::Dynamic minute, ::Dynamic second)
{
	return ::hx::CreateEnum< Schedule_obj >(HX_("HOURLY",b1,6c,c7,7e),3,2)->_hx_init(0,minute)->_hx_init(1,second);
}

::hx::concurrent::executor::Schedule Schedule_obj::ONCE( ::Dynamic initialDelayMS)
{
	return ::hx::CreateEnum< Schedule_obj >(HX_("ONCE",81,45,73,34),0,1)->_hx_init(0,initialDelayMS);
}

::hx::concurrent::executor::Schedule Schedule_obj::WEEKLY( ::Dynamic day, ::Dynamic hour, ::Dynamic minute, ::Dynamic second)
{
	return ::hx::CreateEnum< Schedule_obj >(HX_("WEEKLY",81,4f,87,b1),5,4)->_hx_init(0,day)->_hx_init(1,hour)->_hx_init(2,minute)->_hx_init(3,second);
}

bool Schedule_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("DAILY",b9,f7,6d,52)) { outValue = Schedule_obj::DAILY_dyn(); return true; }
	if (inName==HX_("FIXED_DELAY",f8,3e,52,5c)) { outValue = Schedule_obj::FIXED_DELAY_dyn(); return true; }
	if (inName==HX_("FIXED_RATE",eb,b4,8e,b3)) { outValue = Schedule_obj::FIXED_RATE_dyn(); return true; }
	if (inName==HX_("HOURLY",b1,6c,c7,7e)) { outValue = Schedule_obj::HOURLY_dyn(); return true; }
	if (inName==HX_("ONCE",81,45,73,34)) { outValue = Schedule_obj::ONCE_dyn(); return true; }
	if (inName==HX_("WEEKLY",81,4f,87,b1)) { outValue = Schedule_obj::WEEKLY_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Schedule_obj)

int Schedule_obj::__FindIndex(::String inName)
{
	if (inName==HX_("DAILY",b9,f7,6d,52)) return 4;
	if (inName==HX_("FIXED_DELAY",f8,3e,52,5c)) return 1;
	if (inName==HX_("FIXED_RATE",eb,b4,8e,b3)) return 2;
	if (inName==HX_("HOURLY",b1,6c,c7,7e)) return 3;
	if (inName==HX_("ONCE",81,45,73,34)) return 0;
	if (inName==HX_("WEEKLY",81,4f,87,b1)) return 5;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC3(Schedule_obj,DAILY,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(Schedule_obj,FIXED_DELAY,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(Schedule_obj,FIXED_RATE,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(Schedule_obj,HOURLY,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Schedule_obj,ONCE,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC4(Schedule_obj,WEEKLY,return)

int Schedule_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("DAILY",b9,f7,6d,52)) return 3;
	if (inName==HX_("FIXED_DELAY",f8,3e,52,5c)) return 2;
	if (inName==HX_("FIXED_RATE",eb,b4,8e,b3)) return 2;
	if (inName==HX_("HOURLY",b1,6c,c7,7e)) return 2;
	if (inName==HX_("ONCE",81,45,73,34)) return 1;
	if (inName==HX_("WEEKLY",81,4f,87,b1)) return 4;
	return super::__FindArgCount(inName);
}

::hx::Val Schedule_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("DAILY",b9,f7,6d,52)) return DAILY_dyn();
	if (inName==HX_("FIXED_DELAY",f8,3e,52,5c)) return FIXED_DELAY_dyn();
	if (inName==HX_("FIXED_RATE",eb,b4,8e,b3)) return FIXED_RATE_dyn();
	if (inName==HX_("HOURLY",b1,6c,c7,7e)) return HOURLY_dyn();
	if (inName==HX_("ONCE",81,45,73,34)) return ONCE_dyn();
	if (inName==HX_("WEEKLY",81,4f,87,b1)) return WEEKLY_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String Schedule_obj_sStaticFields[] = {
	HX_("ONCE",81,45,73,34),
	HX_("FIXED_DELAY",f8,3e,52,5c),
	HX_("FIXED_RATE",eb,b4,8e,b3),
	HX_("HOURLY",b1,6c,c7,7e),
	HX_("DAILY",b9,f7,6d,52),
	HX_("WEEKLY",81,4f,87,b1),
	::String(null())
};

::hx::Class Schedule_obj::__mClass;

Dynamic __Create_Schedule_obj() { return new Schedule_obj; }

void Schedule_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("hx.concurrent.executor.Schedule",19,a7,f5,78), ::hx::TCanCast< Schedule_obj >,Schedule_obj_sStaticFields,0,
	&__Create_Schedule_obj, &__Create,
	&super::__SGetClass(), &CreateSchedule_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Schedule_obj::__GetStatic;
}

void Schedule_obj::__boot()
{
}


} // end namespace hx
} // end namespace concurrent
} // end namespace executor
