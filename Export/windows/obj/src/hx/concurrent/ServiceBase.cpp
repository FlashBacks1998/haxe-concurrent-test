// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hx_concurrent_Service
#include <hx/concurrent/Service.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceBase
#include <hx/concurrent/ServiceBase.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceState
#include <hx/concurrent/ServiceState.h>
#endif
#ifndef INCLUDED_hx_concurrent_atomic__AtomicInt_AtomicIntImpl
#include <hx/concurrent/atomic/_AtomicInt/AtomicIntImpl.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_AbstractAcquirable
#include <hx/concurrent/lock/AbstractAcquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_Acquirable
#include <hx/concurrent/lock/Acquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_RLock
#include <hx/concurrent/lock/RLock.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e4805b9801755441_33_new,"hx.concurrent.ServiceBase","new",0xe59e4d1f,"hx.concurrent.ServiceBase.new","hx/concurrent/Service.hx",33,0x117b7e62)
HX_LOCAL_STACK_FRAME(_hx_pos_e4805b9801755441_40_set_state,"hx.concurrent.ServiceBase","set_state",0x0fd8d473,"hx.concurrent.ServiceBase.set_state","hx/concurrent/Service.hx",40,0x117b7e62)
HX_LOCAL_STACK_FRAME(_hx_pos_e4805b9801755441_59_start,"hx.concurrent.ServiceBase","start",0x2e7ddee1,"hx.concurrent.ServiceBase.start","hx/concurrent/Service.hx",59,0x117b7e62)
HX_LOCAL_STACK_FRAME(_hx_pos_e4805b9801755441_57_start,"hx.concurrent.ServiceBase","start",0x2e7ddee1,"hx.concurrent.ServiceBase.start","hx/concurrent/Service.hx",57,0x117b7e62)
HX_LOCAL_STACK_FRAME(_hx_pos_e4805b9801755441_73_onStart,"hx.concurrent.ServiceBase","onStart",0x160a5b02,"hx.concurrent.ServiceBase.onStart","hx/concurrent/Service.hx",73,0x117b7e62)
HX_LOCAL_STACK_FRAME(_hx_pos_e4805b9801755441_80_stop,"hx.concurrent.ServiceBase","stop",0x083e9a63,"hx.concurrent.ServiceBase.stop","hx/concurrent/Service.hx",80,0x117b7e62)
HX_LOCAL_STACK_FRAME(_hx_pos_e4805b9801755441_78_stop,"hx.concurrent.ServiceBase","stop",0x083e9a63,"hx.concurrent.ServiceBase.stop","hx/concurrent/Service.hx",78,0x117b7e62)
HX_LOCAL_STACK_FRAME(_hx_pos_e4805b9801755441_89_onStop,"hx.concurrent.ServiceBase","onStop",0x6890bd62,"hx.concurrent.ServiceBase.onStop","hx/concurrent/Service.hx",89,0x117b7e62)
HX_LOCAL_STACK_FRAME(_hx_pos_e4805b9801755441_96_toString,"hx.concurrent.ServiceBase","toString",0x85ccbf8d,"hx.concurrent.ServiceBase.toString","hx/concurrent/Service.hx",96,0x117b7e62)
HX_LOCAL_STACK_FRAME(_hx_pos_e4805b9801755441_35_boot,"hx.concurrent.ServiceBase","boot",0xfcfe2e93,"hx.concurrent.ServiceBase.boot","hx/concurrent/Service.hx",35,0x117b7e62)
namespace hx{
namespace concurrent{

void ServiceBase_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e4805b9801755441_33_new)
HXLINE(  49)		this->_stateLock =  ::hx::concurrent::lock::RLock_obj::__alloc( HX_CTX );
HXLINE(  39)		this->state = ::hx::concurrent::ServiceState_obj::STOPPED_dyn();
HXLINE(  37)		this->id = ::hx::concurrent::ServiceBase_obj::_ids->incrementAndGet(null());
HXLINE(  53)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  53)		::String _hx_tmp1 = ((HX_("[",5b,00,00,00) + ::Std_obj::string(::hx::ObjectPtr<OBJ_>(this))) + HX_("] instantiated.",71,0d,21,d2));
HXDLIN(  53)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("hx/concurrent/Service.hx",62,7e,7b,11),53,HX_("hx.concurrent.ServiceBase",ad,d1,d3,85),HX_("new",60,d0,53,00)));
            	}

bool ServiceBase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7b12badf;
}

static ::hx::concurrent::Service_obj _hx_hx_concurrent_ServiceBase__hx_hx_concurrent_Service= {
	( void (::hx::Object::*)())&::hx::concurrent::ServiceBase_obj::start,
	( void (::hx::Object::*)())&::hx::concurrent::ServiceBase_obj::stop,
	( ::String (::hx::Object::*)())&::hx::concurrent::ServiceBase_obj::toString,
};

void *ServiceBase_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xa01a126e: return &_hx_hx_concurrent_ServiceBase__hx_hx_concurrent_Service;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::hx::concurrent::ServiceState ServiceBase_obj::set_state( ::hx::concurrent::ServiceState s){
            	HX_STACKFRAME(&_hx_pos_e4805b9801755441_40_set_state)
HXLINE(  41)		switch((int)(s->_hx_getIndex())){
            			case (int)0: {
HXLINE(  42)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  42)				::String _hx_tmp1 = ((HX_("[",5b,00,00,00) + ::Std_obj::string(::hx::ObjectPtr<OBJ_>(this))) + HX_("] is starting...",5b,d5,86,3b));
HXDLIN(  42)				_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("hx/concurrent/Service.hx",62,7e,7b,11),42,HX_("hx.concurrent.ServiceBase",ad,d1,d3,85),HX_("set_state",74,be,05,ab)));
            			}
            			break;
            			case (int)1: {
HXLINE(  43)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  43)				::String _hx_tmp3 = ((HX_("[",5b,00,00,00) + ::Std_obj::string(::hx::ObjectPtr<OBJ_>(this))) + HX_("] is running.",02,14,8d,3a));
HXDLIN(  43)				_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("hx/concurrent/Service.hx",62,7e,7b,11),43,HX_("hx.concurrent.ServiceBase",ad,d1,d3,85),HX_("set_state",74,be,05,ab)));
            			}
            			break;
            			case (int)2: {
HXLINE(  44)				 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN(  44)				::String _hx_tmp5 = ((HX_("[",5b,00,00,00) + ::Std_obj::string(::hx::ObjectPtr<OBJ_>(this))) + HX_("] is stopping...",27,d4,ff,ab));
HXDLIN(  44)				_hx_tmp4(_hx_tmp5,::hx::SourceInfo(HX_("hx/concurrent/Service.hx",62,7e,7b,11),44,HX_("hx.concurrent.ServiceBase",ad,d1,d3,85),HX_("set_state",74,be,05,ab)));
            			}
            			break;
            			case (int)3: {
HXLINE(  45)				 ::Dynamic _hx_tmp6 = ::haxe::Log_obj::trace;
HXDLIN(  45)				::String _hx_tmp7 = ((HX_("[",5b,00,00,00) + ::Std_obj::string(::hx::ObjectPtr<OBJ_>(this))) + HX_("] is stopped.",34,3c,ec,db));
HXDLIN(  45)				_hx_tmp6(_hx_tmp7,::hx::SourceInfo(HX_("hx/concurrent/Service.hx",62,7e,7b,11),45,HX_("hx.concurrent.ServiceBase",ad,d1,d3,85),HX_("set_state",74,be,05,ab)));
            			}
            			break;
            		}
HXLINE(  47)		return (this->state = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ServiceBase_obj,set_state,return )

void ServiceBase_obj::start(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::ServiceBase,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e4805b9801755441_59_start)
HXLINE(  59)			switch((int)(_gthis->state->_hx_getIndex())){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
            				}
            				break;
            				case (int)2: {
HXLINE(  62)					HX_STACK_DO_THROW(((HX_("Service [",90,4f,a7,5e) + ::Std_obj::string(_gthis)) + HX_("] is currently stopping!",c0,18,c3,10)));
            				}
            				break;
            				case (int)3: {
HXLINE(  64)					_gthis->set_state(::hx::concurrent::ServiceState_obj::STARTING_dyn());
HXLINE(  65)					_gthis->onStart();
HXLINE(  66)					_gthis->set_state(::hx::concurrent::ServiceState_obj::RUNNING_dyn());
            				}
            				break;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e4805b9801755441_57_start)
HXDLIN(  57)		 ::hx::concurrent::ServiceBase _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  58)		this->_stateLock->execute( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ServiceBase_obj,start,(void))

void ServiceBase_obj::onStart(){
            	HX_STACKFRAME(&_hx_pos_e4805b9801755441_73_onStart)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ServiceBase_obj,onStart,(void))

void ServiceBase_obj::stop(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::ServiceBase,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e4805b9801755441_80_stop)
HXLINE(  80)			if (::hx::IsPointerEq( _gthis->state,::hx::concurrent::ServiceState_obj::RUNNING_dyn() )) {
HXLINE(  81)				_gthis->set_state(::hx::concurrent::ServiceState_obj::STOPPING_dyn());
HXLINE(  82)				_gthis->onStop();
HXLINE(  83)				_gthis->set_state(::hx::concurrent::ServiceState_obj::STOPPED_dyn());
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e4805b9801755441_78_stop)
HXDLIN(  78)		 ::hx::concurrent::ServiceBase _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  79)		this->_stateLock->execute( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ServiceBase_obj,stop,(void))

void ServiceBase_obj::onStop(){
            	HX_STACKFRAME(&_hx_pos_e4805b9801755441_89_onStop)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ServiceBase_obj,onStop,(void))

::String ServiceBase_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_e4805b9801755441_96_toString)
HXDLIN(  96)		::String _hx_tmp = (::Type_obj::getClassName(::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this))) + HX_("#",23,00,00,00));
HXDLIN(  96)		return (_hx_tmp + this->id);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ServiceBase_obj,toString,return )

 ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl ServiceBase_obj::_ids;


ServiceBase_obj::ServiceBase_obj()
{
}

void ServiceBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ServiceBase);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(_stateLock,"_stateLock");
	HX_MARK_END_CLASS();
}

void ServiceBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(_stateLock,"_stateLock");
}

::hx::Val ServiceBase_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return ::hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onStop") ) { return ::hx::Val( onStop_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onStart") ) { return ::hx::Val( onStart_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_state") ) { return ::hx::Val( set_state_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_stateLock") ) { return ::hx::Val( _stateLock ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ServiceBase_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_ids") ) { outValue = ( _ids ); return true; }
	}
	return false;
}

::hx::Val ServiceBase_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_state(inValue.Cast<  ::hx::concurrent::ServiceState >()) );state=inValue.Cast<  ::hx::concurrent::ServiceState >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_stateLock") ) { _stateLock=inValue.Cast<  ::hx::concurrent::lock::RLock >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ServiceBase_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_ids") ) { _ids=ioValue.Cast<  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl >(); return true; }
	}
	return false;
}

void ServiceBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("state",11,76,0b,84));
	outFields->push(HX_("_stateLock",5d,96,01,86));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ServiceBase_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ServiceBase_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsObject /*  ::hx::concurrent::ServiceState */ ,(int)offsetof(ServiceBase_obj,state),HX_("state",11,76,0b,84)},
	{::hx::fsObject /*  ::hx::concurrent::lock::RLock */ ,(int)offsetof(ServiceBase_obj,_stateLock),HX_("_stateLock",5d,96,01,86)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ServiceBase_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl */ ,(void *) &ServiceBase_obj::_ids,HX_("_ids",39,49,1b,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ServiceBase_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("state",11,76,0b,84),
	HX_("set_state",74,be,05,ab),
	HX_("_stateLock",5d,96,01,86),
	HX_("start",62,74,0b,84),
	HX_("onStart",c3,12,49,1a),
	HX_("stop",02,f0,5b,4c),
	HX_("onStop",c1,f8,e5,ee),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void ServiceBase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ServiceBase_obj::_ids,"_ids");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ServiceBase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ServiceBase_obj::_ids,"_ids");
};

#endif

::hx::Class ServiceBase_obj::__mClass;

static ::String ServiceBase_obj_sStaticFields[] = {
	HX_("_ids",39,49,1b,3f),
	::String(null())
};

void ServiceBase_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.ServiceBase",ad,d1,d3,85);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &ServiceBase_obj::__GetStatic;
	__mClass->mSetStaticField = &ServiceBase_obj::__SetStatic;
	__mClass->mMarkFunc = ServiceBase_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ServiceBase_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ServiceBase_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ServiceBase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ServiceBase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ServiceBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ServiceBase_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ServiceBase_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_e4805b9801755441_35_boot)
HXDLIN(  35)		_ids =  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl_obj::__alloc( HX_CTX ,0);
            	}
}

} // end namespace hx
} // end namespace concurrent
