// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_hx_concurrent_internal_Dates
#include <hx/concurrent/internal/Dates.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d350df22a4a4240e_42_now,"hx.concurrent.internal.Dates","now",0x7023f215,"hx.concurrent.internal.Dates.now","hx/concurrent/internal/Dates.hx",42,0xf1af4e52)
HX_LOCAL_STACK_FRAME(_hx_pos_d350df22a4a4240e_56_toDate,"hx.concurrent.internal.Dates","toDate",0x4ff911aa,"hx.concurrent.internal.Dates.toDate","hx/concurrent/internal/Dates.hx",56,0xf1af4e52)
namespace hx{
namespace concurrent{
namespace internal{

void Dates_obj::__construct() { }

Dynamic Dates_obj::__CreateEmpty() { return new Dates_obj; }

void *Dates_obj::_hx_vtable = 0;

Dynamic Dates_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Dates_obj > _hx_result = new Dates_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Dates_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2f7bb6a1;
}

Float Dates_obj::now(){
            	HX_STACKFRAME(&_hx_pos_d350df22a4a4240e_42_now)
HXDLIN(  42)		return (::Sys_obj::time() * ( (Float)(1000) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Dates_obj,now,return )

 ::Date Dates_obj::toDate(Float time){
            	HX_STACKFRAME(&_hx_pos_d350df22a4a4240e_56_toDate)
HXDLIN(  56)		return ::Date_obj::fromTime(time);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,toDate,return )


Dates_obj::Dates_obj()
{
}

bool Dates_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"now") ) { outValue = now_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toDate") ) { outValue = toDate_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Dates_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Dates_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Dates_obj::__mClass;

static ::String Dates_obj_sStaticFields[] = {
	HX_("now",16,d9,53,00),
	HX_("toDate",49,c1,1c,78),
	::String(null())
};

void Dates_obj::__register()
{
	Dates_obj _hx_dummy;
	Dates_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.internal.Dates",ed,4d,c6,a5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Dates_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Dates_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Dates_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Dates_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Dates_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace concurrent
} // end namespace internal
