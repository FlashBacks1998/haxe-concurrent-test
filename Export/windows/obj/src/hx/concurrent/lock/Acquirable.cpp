// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_hx_concurrent_lock_Acquirable
#include <hx/concurrent/lock/Acquirable.h>
#endif

namespace hx{
namespace concurrent{
namespace lock{


static ::String Acquirable_obj_sMemberFields[] = {
	HX_("get_availablePermits",78,c9,5a,ac),
	HX_("acquire",d6,4b,e4,b4),
	HX_("tryAcquire",db,77,4c,9c),
	HX_("release",c7,85,ed,58),
	HX_("execute",35,0a,0d,cc),
	::String(null()) };

::hx::Class Acquirable_obj::__mClass;

void Acquirable_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.lock.Acquirable",f3,98,ac,9e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Acquirable_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TIsInterface< (int)0x3a6fb49b >;
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace concurrent
} // end namespace lock
