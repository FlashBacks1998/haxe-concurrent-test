// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_hx_concurrent_lock_AbstractAcquirable
#include <hx/concurrent/lock/AbstractAcquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_Acquirable
#include <hx/concurrent/lock/Acquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_RLock
#include <hx/concurrent/lock/RLock.h>
#endif
#ifndef INCLUDED_hx_concurrent_thread_Threads
#include <hx/concurrent/thread/Threads.h>
#endif
#ifndef INCLUDED_sys_thread_Mutex
#include <sys/thread/Mutex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_824ea6cf95906bd1_17_new,"hx.concurrent.lock.RLock","new",0x044d0605,"hx.concurrent.lock.RLock.new","hx/concurrent/lock/RLock.hx",17,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_40_get_availablePermits,"hx.concurrent.lock.RLock","get_availablePermits",0x2b1eea33,"hx.concurrent.lock.RLock.get_availablePermits","hx/concurrent/lock/RLock.hx",40,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_48_get_isAcquiredByAnyThread,"hx.concurrent.lock.RLock","get_isAcquiredByAnyThread",0xf5b122c3,"hx.concurrent.lock.RLock.get_isAcquiredByAnyThread","hx/concurrent/lock/RLock.hx",48,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_56_get_isAcquiredByCurrentThread,"hx.concurrent.lock.RLock","get_isAcquiredByCurrentThread",0xdc313650,"hx.concurrent.lock.RLock.get_isAcquiredByCurrentThread","hx/concurrent/lock/RLock.hx",56,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_64_get_isAcquiredByOtherThread,"hx.concurrent.lock.RLock","get_isAcquiredByOtherThread",0x5d1f26e7,"hx.concurrent.lock.RLock.get_isAcquiredByOtherThread","hx/concurrent/lock/RLock.hx",64,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_75_acquire,"hx.concurrent.lock.RLock","acquire",0xe739b7fb,"hx.concurrent.lock.RLock.acquire","hx/concurrent/lock/RLock.hx",75,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_100_tryAcquire,"hx.concurrent.lock.RLock","tryAcquire",0x489770d6,"hx.concurrent.lock.RLock.tryAcquire","hx/concurrent/lock/RLock.hx",100,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_97_tryAcquire,"hx.concurrent.lock.RLock","tryAcquire",0x489770d6,"hx.concurrent.lock.RLock.tryAcquire","hx/concurrent/lock/RLock.hx",97,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_113_tryAcquireInternal,"hx.concurrent.lock.RLock","tryAcquireInternal",0x2d7d5a33,"hx.concurrent.lock.RLock.tryAcquireInternal","hx/concurrent/lock/RLock.hx",113,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_111_tryAcquireInternal,"hx.concurrent.lock.RLock","tryAcquireInternal",0x2d7d5a33,"hx.concurrent.lock.RLock.tryAcquireInternal","hx/concurrent/lock/RLock.hx",111,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_141_release,"hx.concurrent.lock.RLock","release",0x8b42f1ec,"hx.concurrent.lock.RLock.release","hx/concurrent/lock/RLock.hx",141,0x5532586c)
HX_LOCAL_STACK_FRAME(_hx_pos_824ea6cf95906bd1_23_boot,"hx.concurrent.lock.RLock","boot",0xb7313eed,"hx.concurrent.lock.RLock.boot","hx/concurrent/lock/RLock.hx",23,0x5532586c)
namespace hx{
namespace concurrent{
namespace lock{

void RLock_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_824ea6cf95906bd1_17_new)
HXLINE(  36)		this->_holderEntranceCount = 0;
HXLINE(  35)		this->_holder = null();
HXLINE(  26)		this->_rlock =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
            	}

Dynamic RLock_obj::__CreateEmpty() { return new RLock_obj; }

void *RLock_obj::_hx_vtable = 0;

Dynamic RLock_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RLock_obj > _hx_result = new RLock_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RLock_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x11fdfc63) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x11fdfc63;
	} else {
		return inClassId==(int)0x22633cdd;
	}
}

int RLock_obj::get_availablePermits(){
            	HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_40_get_availablePermits)
HXDLIN(  40)		if (::hx::IsNotNull( this->_holder )) {
HXDLIN(  40)			return 0;
            		}
            		else {
HXDLIN(  40)			return 1;
            		}
HXDLIN(  40)		return 0;
            	}


bool RLock_obj::get_isAcquiredByAnyThread(){
            	HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_48_get_isAcquiredByAnyThread)
HXDLIN(  48)		return ::hx::IsNotNull( this->_holder );
            	}


HX_DEFINE_DYNAMIC_FUNC0(RLock_obj,get_isAcquiredByAnyThread,return )

bool RLock_obj::get_isAcquiredByCurrentThread(){
            	HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_56_get_isAcquiredByCurrentThread)
HXDLIN(  56)		 ::Dynamic _hx_tmp = this->_holder;
HXDLIN(  56)		return ::hx::IsEq( _hx_tmp,::hx::concurrent::thread::Threads_obj::get_current() );
            	}


HX_DEFINE_DYNAMIC_FUNC0(RLock_obj,get_isAcquiredByCurrentThread,return )

bool RLock_obj::get_isAcquiredByOtherThread(){
            	HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_64_get_isAcquiredByOtherThread)
HXDLIN(  64)		if (::hx::IsNotNull( this->_holder )) {
HXDLIN(  64)			 ::Dynamic _hx_tmp = this->_holder;
HXDLIN(  64)			return ::hx::IsNotEq( _hx_tmp,::hx::concurrent::thread::Threads_obj::get_current() );
            		}
            		else {
HXDLIN(  64)			return false;
            		}
HXDLIN(  64)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RLock_obj,get_isAcquiredByOtherThread,return )

void RLock_obj::acquire(){
            	HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_75_acquire)
HXLINE(  77)		this->_rlock->acquire();
HXLINE(  84)		this->_holder = ::hx::concurrent::thread::Threads_obj::get_current();
HXLINE(  85)		this->_holderEntranceCount++;
            	}


bool RLock_obj::tryAcquire(::hx::Null< int >  __o_timeoutMS){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::lock::RLock,_gthis) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_100_tryAcquire)
HXLINE( 100)			return _gthis->_rlock->tryAcquire();
            		}
            		HX_END_LOCAL_FUNC0(return)

            		int timeoutMS = __o_timeoutMS.Default(0);
            	HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_97_tryAcquire)
HXLINE(  98)		if ((timeoutMS < 0)) {
HXLINE(  98)			HX_STACK_DO_THROW(HX_("[timeoutMS] must be >= 0",a4,75,eb,5b));
            		}
HXLINE( 100)		 ::hx::concurrent::lock::RLock _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 100)		if (::hx::concurrent::thread::Threads_obj::await( ::Dynamic(new _hx_Closure_0(_gthis)),timeoutMS,null())) {
HXLINE( 101)			this->_holder = ::hx::concurrent::thread::Threads_obj::get_current();
HXLINE( 102)			this->_holderEntranceCount++;
HXLINE( 103)			return true;
            		}
HXLINE( 106)		return false;
            	}


bool RLock_obj::tryAcquireInternal(::hx::Null< int >  __o_timeoutMS){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::lock::RLock,_gthis) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_113_tryAcquireInternal)
HXLINE( 113)			return _gthis->_rlock->tryAcquire();
            		}
            		HX_END_LOCAL_FUNC0(return)

            		int timeoutMS = __o_timeoutMS.Default(0);
            	HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_111_tryAcquireInternal)
HXDLIN( 111)		 ::hx::concurrent::lock::RLock _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 113)		return ::hx::concurrent::thread::Threads_obj::await( ::Dynamic(new _hx_Closure_0(_gthis)),timeoutMS,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(RLock_obj,tryAcquireInternal,return )

void RLock_obj::release(){
            	HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_141_release)
HXLINE( 142)		 ::Dynamic _hx_tmp = this->_holder;
HXDLIN( 142)		if (::hx::IsEq( _hx_tmp,::hx::concurrent::thread::Threads_obj::get_current() )) {
HXLINE( 143)			this->_holderEntranceCount--;
HXLINE( 144)			if ((this->_holderEntranceCount == 0)) {
HXLINE( 145)				this->_holder = null();
            			}
            		}
            		else {
HXLINE( 146)			bool _hx_tmp1;
HXDLIN( 146)			if (::hx::IsNotNull( this->_holder )) {
HXLINE( 146)				 ::Dynamic _hx_tmp2 = this->_holder;
HXDLIN( 146)				_hx_tmp1 = ::hx::IsNotEq( _hx_tmp2,::hx::concurrent::thread::Threads_obj::get_current() );
            			}
            			else {
HXLINE( 146)				_hx_tmp1 = false;
            			}
HXDLIN( 146)			if (_hx_tmp1) {
HXLINE( 147)				HX_STACK_DO_THROW(HX_("Lock was aquired by another thread!",30,b5,a6,55));
            			}
            			else {
HXLINE( 149)				HX_STACK_DO_THROW(HX_("Lock was not aquired by any thread!",c6,ee,d2,55));
            			}
            		}
HXLINE( 152)		this->_rlock->release();
            	}


bool RLock_obj::isSupported;


::hx::ObjectPtr< RLock_obj > RLock_obj::__new() {
	::hx::ObjectPtr< RLock_obj > __this = new RLock_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< RLock_obj > RLock_obj::__alloc(::hx::Ctx *_hx_ctx) {
	RLock_obj *__this = (RLock_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RLock_obj), true, "hx.concurrent.lock.RLock"));
	*(void **)__this = RLock_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RLock_obj::RLock_obj()
{
}

void RLock_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RLock);
	HX_MARK_MEMBER_NAME(_rlock,"_rlock");
	HX_MARK_MEMBER_NAME(_holder,"_holder");
	HX_MARK_MEMBER_NAME(_holderEntranceCount,"_holderEntranceCount");
	HX_MARK_END_CLASS();
}

void RLock_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_rlock,"_rlock");
	HX_VISIT_MEMBER_NAME(_holder,"_holder");
	HX_VISIT_MEMBER_NAME(_holderEntranceCount,"_holderEntranceCount");
}

::hx::Val RLock_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_rlock") ) { return ::hx::Val( _rlock ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_holder") ) { return ::hx::Val( _holder ); }
		if (HX_FIELD_EQ(inName,"acquire") ) { return ::hx::Val( acquire_dyn() ); }
		if (HX_FIELD_EQ(inName,"release") ) { return ::hx::Val( release_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tryAcquire") ) { return ::hx::Val( tryAcquire_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"tryAcquireInternal") ) { return ::hx::Val( tryAcquireInternal_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_holderEntranceCount") ) { return ::hx::Val( _holderEntranceCount ); }
		if (HX_FIELD_EQ(inName,"get_availablePermits") ) { return ::hx::Val( get_availablePermits_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"isAcquiredByAnyThread") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_isAcquiredByAnyThread() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"isAcquiredByOtherThread") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_isAcquiredByOtherThread() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"get_isAcquiredByAnyThread") ) { return ::hx::Val( get_isAcquiredByAnyThread_dyn() ); }
		if (HX_FIELD_EQ(inName,"isAcquiredByCurrentThread") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_isAcquiredByCurrentThread() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"get_isAcquiredByOtherThread") ) { return ::hx::Val( get_isAcquiredByOtherThread_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"get_isAcquiredByCurrentThread") ) { return ::hx::Val( get_isAcquiredByCurrentThread_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RLock_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_rlock") ) { _rlock=inValue.Cast<  ::sys::thread::Mutex >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_holder") ) { _holder=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_holderEntranceCount") ) { _holderEntranceCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RLock_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_rlock",9e,04,4d,e7));
	outFields->push(HX_("_holder",0b,41,be,34));
	outFields->push(HX_("_holderEntranceCount",6e,82,c3,74));
	outFields->push(HX_("isAcquiredByAnyThread",07,0f,af,44));
	outFields->push(HX_("isAcquiredByCurrentThread",94,94,d4,a5));
	outFields->push(HX_("isAcquiredByOtherThread",2b,ac,a3,d8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RLock_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(int)offsetof(RLock_obj,_rlock),HX_("_rlock",9e,04,4d,e7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(RLock_obj,_holder),HX_("_holder",0b,41,be,34)},
	{::hx::fsInt,(int)offsetof(RLock_obj,_holderEntranceCount),HX_("_holderEntranceCount",6e,82,c3,74)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo RLock_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &RLock_obj::isSupported,HX_("isSupported",e4,7c,8a,f3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String RLock_obj_sMemberFields[] = {
	HX_("_rlock",9e,04,4d,e7),
	HX_("_holder",0b,41,be,34),
	HX_("_holderEntranceCount",6e,82,c3,74),
	HX_("get_availablePermits",78,c9,5a,ac),
	HX_("get_isAcquiredByAnyThread",5e,c9,ac,4a),
	HX_("get_isAcquiredByCurrentThread",6b,c6,13,8e),
	HX_("get_isAcquiredByOtherThread",42,ea,45,a5),
	HX_("acquire",d6,4b,e4,b4),
	HX_("tryAcquire",db,77,4c,9c),
	HX_("tryAcquireInternal",38,6e,c8,76),
	HX_("release",c7,85,ed,58),
	::String(null()) };

static void RLock_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RLock_obj::isSupported,"isSupported");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RLock_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RLock_obj::isSupported,"isSupported");
};

#endif

::hx::Class RLock_obj::__mClass;

static ::String RLock_obj_sStaticFields[] = {
	HX_("isSupported",e4,7c,8a,f3),
	::String(null())
};

void RLock_obj::__register()
{
	RLock_obj _hx_dummy;
	RLock_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.lock.RLock",93,9f,6e,bc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RLock_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RLock_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RLock_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RLock_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RLock_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RLock_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RLock_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RLock_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_824ea6cf95906bd1_23_boot)
HXDLIN(  23)		isSupported = true;
            	}
}

} // end namespace hx
} // end namespace concurrent
} // end namespace lock
