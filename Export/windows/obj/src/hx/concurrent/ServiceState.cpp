// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_hx_concurrent_ServiceState
#include <hx/concurrent/ServiceState.h>
#endif
namespace hx{
namespace concurrent{

::hx::concurrent::ServiceState ServiceState_obj::RUNNING;

::hx::concurrent::ServiceState ServiceState_obj::STARTING;

::hx::concurrent::ServiceState ServiceState_obj::STOPPED;

::hx::concurrent::ServiceState ServiceState_obj::STOPPING;

bool ServiceState_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("RUNNING",df,41,3d,6b)) { outValue = ServiceState_obj::RUNNING; return true; }
	if (inName==HX_("STARTING",c0,91,31,9c)) { outValue = ServiceState_obj::STARTING; return true; }
	if (inName==HX_("STOPPED",ed,a5,35,c3)) { outValue = ServiceState_obj::STOPPED; return true; }
	if (inName==HX_("STOPPING",74,9b,be,0b)) { outValue = ServiceState_obj::STOPPING; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(ServiceState_obj)

int ServiceState_obj::__FindIndex(::String inName)
{
	if (inName==HX_("RUNNING",df,41,3d,6b)) return 1;
	if (inName==HX_("STARTING",c0,91,31,9c)) return 0;
	if (inName==HX_("STOPPED",ed,a5,35,c3)) return 3;
	if (inName==HX_("STOPPING",74,9b,be,0b)) return 2;
	return super::__FindIndex(inName);
}

int ServiceState_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("RUNNING",df,41,3d,6b)) return 0;
	if (inName==HX_("STARTING",c0,91,31,9c)) return 0;
	if (inName==HX_("STOPPED",ed,a5,35,c3)) return 0;
	if (inName==HX_("STOPPING",74,9b,be,0b)) return 0;
	return super::__FindArgCount(inName);
}

::hx::Val ServiceState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("RUNNING",df,41,3d,6b)) return RUNNING;
	if (inName==HX_("STARTING",c0,91,31,9c)) return STARTING;
	if (inName==HX_("STOPPED",ed,a5,35,c3)) return STOPPED;
	if (inName==HX_("STOPPING",74,9b,be,0b)) return STOPPING;
	return super::__Field(inName,inCallProp);
}

static ::String ServiceState_obj_sStaticFields[] = {
	HX_("STARTING",c0,91,31,9c),
	HX_("RUNNING",df,41,3d,6b),
	HX_("STOPPING",74,9b,be,0b),
	HX_("STOPPED",ed,a5,35,c3),
	::String(null())
};

::hx::Class ServiceState_obj::__mClass;

Dynamic __Create_ServiceState_obj() { return new ServiceState_obj; }

void ServiceState_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("hx.concurrent.ServiceState",f5,f4,d4,69), ::hx::TCanCast< ServiceState_obj >,ServiceState_obj_sStaticFields,0,
	&__Create_ServiceState_obj, &__Create,
	&super::__SGetClass(), &CreateServiceState_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &ServiceState_obj::__GetStatic;
}

void ServiceState_obj::__boot()
{
RUNNING = ::hx::CreateConstEnum< ServiceState_obj >(HX_("RUNNING",df,41,3d,6b),1);
STARTING = ::hx::CreateConstEnum< ServiceState_obj >(HX_("STARTING",c0,91,31,9c),0);
STOPPED = ::hx::CreateConstEnum< ServiceState_obj >(HX_("STOPPED",ed,a5,35,c3),3);
STOPPING = ::hx::CreateConstEnum< ServiceState_obj >(HX_("STOPPING",74,9b,be,0b),2);
}


} // end namespace hx
} // end namespace concurrent
