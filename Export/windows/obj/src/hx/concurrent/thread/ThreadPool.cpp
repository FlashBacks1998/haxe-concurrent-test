// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hx_concurrent_Service
#include <hx/concurrent/Service.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceBase
#include <hx/concurrent/ServiceBase.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceState
#include <hx/concurrent/ServiceState.h>
#endif
#ifndef INCLUDED_hx_concurrent_atomic__AtomicInt_AtomicIntImpl
#include <hx/concurrent/atomic/_AtomicInt/AtomicIntImpl.h>
#endif
#ifndef INCLUDED_hx_concurrent_collection_Queue
#include <hx/concurrent/collection/Queue.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_AbstractAcquirable
#include <hx/concurrent/lock/AbstractAcquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_Acquirable
#include <hx/concurrent/lock/Acquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_RLock
#include <hx/concurrent/lock/RLock.h>
#endif
#ifndef INCLUDED_hx_concurrent_thread_ThreadContext
#include <hx/concurrent/thread/ThreadContext.h>
#endif
#ifndef INCLUDED_hx_concurrent_thread_ThreadPool
#include <hx/concurrent/thread/ThreadPool.h>
#endif
#ifndef INCLUDED_hx_concurrent_thread_Threads
#include <hx/concurrent/thread/Threads.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_16_new,"hx.concurrent.thread.ThreadPool","new",0x1700e3a3,"hx.concurrent.thread.ThreadPool.new","hx/concurrent/thread/ThreadPool.hx",16,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_34_set_pollPeriod,"hx.concurrent.thread.ThreadPool","set_pollPeriod",0x720bfafa,"hx.concurrent.thread.ThreadPool.set_pollPeriod","hx/concurrent/thread/ThreadPool.hx",34,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_44_get_executingTasks,"hx.concurrent.thread.ThreadPool","get_executingTasks",0xa391ce62,"hx.concurrent.thread.ThreadPool.get_executingTasks","hx/concurrent/thread/ThreadPool.hx",44,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_50_get_pendingTasks,"hx.concurrent.thread.ThreadPool","get_pendingTasks",0x18f5a51d,"hx.concurrent.thread.ThreadPool.get_pendingTasks","hx/concurrent/thread/ThreadPool.hx",50,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_76_awaitCompletion,"hx.concurrent.thread.ThreadPool","awaitCompletion",0x260ca1d5,"hx.concurrent.thread.ThreadPool.awaitCompletion","hx/concurrent/thread/ThreadPool.hx",76,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_82_cancelPendingTasks,"hx.concurrent.thread.ThreadPool","cancelPendingTasks",0xdde3726e,"hx.concurrent.thread.ThreadPool.cancelPendingTasks","hx/concurrent/thread/ThreadPool.hx",82,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_94_onStart,"hx.concurrent.thread.ThreadPool","onStart",0xbc548386,"hx.concurrent.thread.ThreadPool.onStart","hx/concurrent/thread/ThreadPool.hx",94,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_102_onStart,"hx.concurrent.thread.ThreadPool","onStart",0xbc548386,"hx.concurrent.thread.ThreadPool.onStart","hx/concurrent/thread/ThreadPool.hx",102,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_131_onStart,"hx.concurrent.thread.ThreadPool","onStart",0xbc548386,"hx.concurrent.thread.ThreadPool.onStart","hx/concurrent/thread/ThreadPool.hx",131,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_144_submit,"hx.concurrent.thread.ThreadPool","submit",0xe8d070b5,"hx.concurrent.thread.ThreadPool.submit","hx/concurrent/thread/ThreadPool.hx",144,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_140_submit,"hx.concurrent.thread.ThreadPool","submit",0xe8d070b5,"hx.concurrent.thread.ThreadPool.submit","hx/concurrent/thread/ThreadPool.hx",140,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_158_stop,"hx.concurrent.thread.ThreadPool","stop",0x0d1fb75f,"hx.concurrent.thread.ThreadPool.stop","hx/concurrent/thread/ThreadPool.hx",158,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_157_stop,"hx.concurrent.thread.ThreadPool","stop",0x0d1fb75f,"hx.concurrent.thread.ThreadPool.stop","hx/concurrent/thread/ThreadPool.hx",157,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_20_boot,"hx.concurrent.thread.ThreadPool","boot",0x01df4b8f,"hx.concurrent.thread.ThreadPool.boot","hx/concurrent/thread/ThreadPool.hx",20,0x8b41f22c)
HX_LOCAL_STACK_FRAME(_hx_pos_da3e9ba3734f54a4_22_boot,"hx.concurrent.thread.ThreadPool","boot",0x01df4b8f,"hx.concurrent.thread.ThreadPool.boot","hx/concurrent/thread/ThreadPool.hx",22,0x8b41f22c)
namespace hx{
namespace concurrent{
namespace thread{

void ThreadPool_obj::__construct(int numThreads,::hx::Null< bool >  __o_autostart){
            		bool autostart = __o_autostart.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_16_new)
HXLINE(  33)		this->pollPeriod = ::hx::concurrent::thread::ThreadPool_obj::DEFAULT_POLL_PERIOD;
HXLINE(  26)		this->_workQueue =  ::hx::concurrent::collection::Queue_obj::__alloc( HX_CTX );
HXLINE(  25)		this->_workingThreadCount =  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl_obj::__alloc( HX_CTX ,0);
HXLINE(  24)		this->_spawnedThreadCount =  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl_obj::__alloc( HX_CTX ,0);
HXLINE(  53)		if ((numThreads < 1)) {
HXLINE(  54)			HX_STACK_DO_THROW(HX_("[numThreads] must be > 0",47,e0,03,e9));
            		}
HXLINE(  56)		super::__construct();
HXLINE(  58)		this->threadCount = numThreads;
HXLINE(  60)		if (autostart) {
HXLINE(  61)			this->start();
            		}
            	}

Dynamic ThreadPool_obj::__CreateEmpty() { return new ThreadPool_obj; }

void *ThreadPool_obj::_hx_vtable = 0;

Dynamic ThreadPool_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ThreadPool_obj > _hx_result = new ThreadPool_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ThreadPool_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c5e933f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c5e933f;
	} else {
		return inClassId==(int)0x7b12badf;
	}
}

Float ThreadPool_obj::set_pollPeriod(Float value){
            	HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_34_set_pollPeriod)
HXLINE(  35)		if ((value <= 0)) {
HXLINE(  36)			HX_STACK_DO_THROW(HX_("[value] must be >= 0",ce,3b,65,16));
            		}
HXLINE(  37)		return (this->pollPeriod = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThreadPool_obj,set_pollPeriod,return )

int ThreadPool_obj::get_executingTasks(){
            	HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_44_get_executingTasks)
HXDLIN(  44)		return this->_workingThreadCount->get_value();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ThreadPool_obj,get_executingTasks,return )

int ThreadPool_obj::get_pendingTasks(){
            	HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_50_get_pendingTasks)
HXDLIN(  50)		return this->_workQueue->_length->get_value();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ThreadPool_obj,get_pendingTasks,return )

bool ThreadPool_obj::awaitCompletion(int timeoutMS){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::thread::ThreadPool,_gthis) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_76_awaitCompletion)
HXDLIN(  76)			if ((_gthis->_workQueue->_length->get_value() == 0)) {
HXDLIN(  76)				return (_gthis->_workingThreadCount->get_value() == 0);
            			}
            			else {
HXDLIN(  76)				return false;
            			}
HXDLIN(  76)			return false;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_76_awaitCompletion)
HXDLIN(  76)		 ::hx::concurrent::thread::ThreadPool _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  76)		return ::hx::concurrent::thread::Threads_obj::await( ::Dynamic(new _hx_Closure_0(_gthis)),timeoutMS,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThreadPool_obj,awaitCompletion,return )

int ThreadPool_obj::cancelPendingTasks(){
            	HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_82_cancelPendingTasks)
HXLINE(  83)		int canceled = 0;
HXLINE(  84)		while(::hx::IsNotNull( this->_workQueue->pop(null()) )){
HXLINE(  87)			canceled = (canceled + 1);
            		}
HXLINE(  89)		return canceled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ThreadPool_obj,cancelPendingTasks,return )

void ThreadPool_obj::onStart(){
            	HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_94_onStart)
HXDLIN(  94)		 ::hx::concurrent::thread::ThreadPool _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  96)		this->set_state(::hx::concurrent::ServiceState_obj::RUNNING_dyn());
HXLINE( 101)		{
HXLINE( 101)			int _g = 0;
HXDLIN( 101)			int _g1 = this->threadCount;
HXDLIN( 101)			while((_g < _g1)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::hx::concurrent::thread::ThreadPool,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_102_onStart)
HXLINE( 103)					_gthis->_spawnedThreadCount->getAndIncrement(null());
HXLINE( 105)					 ::hx::concurrent::thread::ThreadContext context =  ::hx::concurrent::thread::ThreadContext_obj::__alloc( HX_CTX ,::hx::concurrent::thread::ThreadPool_obj::_threadIDs->incrementAndGet(null()));
HXLINE( 107)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 107)					::String _hx_tmp1 = ((HX_("[",5b,00,00,00) + ::Std_obj::string(_gthis)) + HX_("] Spawned thread ",6d,d5,0d,0d));
HXDLIN( 107)					::String _hx_tmp2;
HXDLIN( 107)					if (::hx::IsNull( _gthis->_spawnedThreadCount )) {
HXLINE( 107)						_hx_tmp2 = HX_("null",87,9e,0e,49);
            					}
            					else {
HXLINE( 107)						_hx_tmp2 = ::Std_obj::string(_gthis->_spawnedThreadCount->get_value());
            					}
HXDLIN( 107)					_hx_tmp(((((((_hx_tmp1 + _hx_tmp2) + HX_("/",2f,00,00,00)) + _gthis->threadCount) + HX_(" with ID ",eb,84,5e,5b)) + context->id) + HX_(".",2e,00,00,00)),::hx::SourceInfo(HX_("hx/concurrent/thread/ThreadPool.hx",2c,f2,41,8b),107,HX_("hx.concurrent.thread.ThreadPool",31,d6,ff,95),HX_("onStart",c3,12,49,1a)));
HXLINE( 109)					while(true){
HXLINE( 110)						 ::Dynamic task = _gthis->_workQueue->pop(null());
HXLINE( 111)						if (::hx::IsNull( task )) {
HXLINE( 112)							if (::hx::IsPointerNotEq( _gthis->state,::hx::concurrent::ServiceState_obj::RUNNING_dyn() )) {
HXLINE( 113)								goto _hx_goto_9;
            							}
HXLINE( 114)							::Sys_obj::sleep(_gthis->pollPeriod);
            						}
            						else {
HXLINE( 116)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 117)								_gthis->_workingThreadCount->getAndIncrement(null());
HXLINE( 118)								task(context);
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic _g = _hx_e;
HXLINE( 119)									 ::haxe::Exception ex = ::haxe::Exception_obj::caught(_g);
HXLINE( 120)									::haxe::Log_obj::trace(ex,::hx::SourceInfo(HX_("hx/concurrent/thread/ThreadPool.hx",2c,f2,41,8b),120,HX_("hx.concurrent.thread.ThreadPool",31,d6,ff,95),HX_("onStart",c3,12,49,1a)));
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
HXLINE( 122)							_gthis->_workingThreadCount->getAndIncrement(-1);
            						}
            					}
            					_hx_goto_9:;
HXLINE( 126)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 126)					::String _hx_tmp4 = ((HX_("[",5b,00,00,00) + ::Std_obj::string(_gthis)) + HX_("] Stopped thread with ID ",eb,5b,58,12));
HXDLIN( 126)					_hx_tmp3(((_hx_tmp4 + context->id) + HX_(".",2e,00,00,00)),::hx::SourceInfo(HX_("hx/concurrent/thread/ThreadPool.hx",2c,f2,41,8b),126,HX_("hx.concurrent.thread.ThreadPool",31,d6,ff,95),HX_("onStart",c3,12,49,1a)));
HXLINE( 128)					_gthis->_spawnedThreadCount->getAndIncrement(-1);
HXLINE( 130)					if ((_gthis->_spawnedThreadCount->get_value() == 0)) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::thread::ThreadPool,_gthis) HXARGC(0)
            						 ::hx::concurrent::ServiceState _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_131_onStart)
HXLINE( 131)							return _gthis->set_state(::hx::concurrent::ServiceState_obj::STOPPED_dyn());
            						}
            						HX_END_LOCAL_FUNC0(return)

HXLINE( 131)						_gthis->_stateLock->execute( ::Dynamic(new _hx_Closure_0(_gthis)),null()).StaticCast<  ::hx::concurrent::ServiceState >();
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 101)				_g = (_g + 1);
HXDLIN( 101)				int i = (_g - 1);
HXLINE( 102)				::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_1(_gthis)),false);
            			}
            		}
            	}


void ThreadPool_obj::submit( ::Dynamic task){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::thread::ThreadPool,_gthis, ::Dynamic,task) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_144_submit)
HXLINE( 145)			if (::hx::IsPointerNotEq( _gthis->state,::hx::concurrent::ServiceState_obj::RUNNING_dyn() )) {
HXLINE( 146)				HX_STACK_DO_THROW(((HX_("ThreadPool is not in requried state [RUNNING] but [",e5,52,d1,38) + ::Std_obj::string(_gthis->state)) + HX_("]",5d,00,00,00)));
            			}
HXLINE( 147)			_gthis->_workQueue->push(task);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_140_submit)
HXDLIN( 140)		 ::hx::concurrent::thread::ThreadPool _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 141)		if (::hx::IsNull( task )) {
HXLINE( 142)			HX_STACK_DO_THROW(HX_("[task] must not be null",a3,e1,24,2c));
            		}
HXLINE( 144)		this->_stateLock->execute( ::Dynamic(new _hx_Closure_0(_gthis,task)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThreadPool_obj,submit,(void))

void ThreadPool_obj::stop(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::thread::ThreadPool,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_158_stop)
HXLINE( 158)			if (::hx::IsPointerEq( _gthis->state,::hx::concurrent::ServiceState_obj::RUNNING_dyn() )) {
HXLINE( 159)				_gthis->set_state(::hx::concurrent::ServiceState_obj::STOPPING_dyn());
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_157_stop)
HXDLIN( 157)		 ::hx::concurrent::thread::ThreadPool _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 157)		this->_stateLock->execute( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


Float ThreadPool_obj::DEFAULT_POLL_PERIOD;

 ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl ThreadPool_obj::_threadIDs;


::hx::ObjectPtr< ThreadPool_obj > ThreadPool_obj::__new(int numThreads,::hx::Null< bool >  __o_autostart) {
	::hx::ObjectPtr< ThreadPool_obj > __this = new ThreadPool_obj();
	__this->__construct(numThreads,__o_autostart);
	return __this;
}

::hx::ObjectPtr< ThreadPool_obj > ThreadPool_obj::__alloc(::hx::Ctx *_hx_ctx,int numThreads,::hx::Null< bool >  __o_autostart) {
	ThreadPool_obj *__this = (ThreadPool_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ThreadPool_obj), true, "hx.concurrent.thread.ThreadPool"));
	*(void **)__this = ThreadPool_obj::_hx_vtable;
	__this->__construct(numThreads,__o_autostart);
	return __this;
}

ThreadPool_obj::ThreadPool_obj()
{
}

void ThreadPool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ThreadPool);
	HX_MARK_MEMBER_NAME(_spawnedThreadCount,"_spawnedThreadCount");
	HX_MARK_MEMBER_NAME(_workingThreadCount,"_workingThreadCount");
	HX_MARK_MEMBER_NAME(_workQueue,"_workQueue");
	HX_MARK_MEMBER_NAME(threadCount,"threadCount");
	HX_MARK_MEMBER_NAME(pollPeriod,"pollPeriod");
	 ::hx::concurrent::ServiceBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ThreadPool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_spawnedThreadCount,"_spawnedThreadCount");
	HX_VISIT_MEMBER_NAME(_workingThreadCount,"_workingThreadCount");
	HX_VISIT_MEMBER_NAME(_workQueue,"_workQueue");
	HX_VISIT_MEMBER_NAME(threadCount,"threadCount");
	HX_VISIT_MEMBER_NAME(pollPeriod,"pollPeriod");
	 ::hx::concurrent::ServiceBase_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ThreadPool_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"submit") ) { return ::hx::Val( submit_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onStart") ) { return ::hx::Val( onStart_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_workQueue") ) { return ::hx::Val( _workQueue ); }
		if (HX_FIELD_EQ(inName,"pollPeriod") ) { return ::hx::Val( pollPeriod ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"threadCount") ) { return ::hx::Val( threadCount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pendingTasks") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_pendingTasks() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_pollPeriod") ) { return ::hx::Val( set_pollPeriod_dyn() ); }
		if (HX_FIELD_EQ(inName,"executingTasks") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_executingTasks() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"awaitCompletion") ) { return ::hx::Val( awaitCompletion_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_pendingTasks") ) { return ::hx::Val( get_pendingTasks_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_executingTasks") ) { return ::hx::Val( get_executingTasks_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancelPendingTasks") ) { return ::hx::Val( cancelPendingTasks_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_spawnedThreadCount") ) { return ::hx::Val( _spawnedThreadCount ); }
		if (HX_FIELD_EQ(inName,"_workingThreadCount") ) { return ::hx::Val( _workingThreadCount ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ThreadPool_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_threadIDs") ) { outValue = ( _threadIDs ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"DEFAULT_POLL_PERIOD") ) { outValue = ( DEFAULT_POLL_PERIOD ); return true; }
	}
	return false;
}

::hx::Val ThreadPool_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_workQueue") ) { _workQueue=inValue.Cast<  ::hx::concurrent::collection::Queue >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pollPeriod") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_pollPeriod(inValue.Cast< Float >()) );pollPeriod=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"threadCount") ) { threadCount=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_spawnedThreadCount") ) { _spawnedThreadCount=inValue.Cast<  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_workingThreadCount") ) { _workingThreadCount=inValue.Cast<  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ThreadPool_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_threadIDs") ) { _threadIDs=ioValue.Cast<  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"DEFAULT_POLL_PERIOD") ) { DEFAULT_POLL_PERIOD=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void ThreadPool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_spawnedThreadCount",8a,28,5a,84));
	outFields->push(HX_("_workingThreadCount",93,61,fd,f4));
	outFields->push(HX_("_workQueue",c1,41,90,74));
	outFields->push(HX_("threadCount",a5,dd,53,9e));
	outFields->push(HX_("pollPeriod",a0,0c,47,b3));
	outFields->push(HX_("executingTasks",7c,dd,5c,df));
	outFields->push(HX_("pendingTasks",b7,d9,96,c2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ThreadPool_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl */ ,(int)offsetof(ThreadPool_obj,_spawnedThreadCount),HX_("_spawnedThreadCount",8a,28,5a,84)},
	{::hx::fsObject /*  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl */ ,(int)offsetof(ThreadPool_obj,_workingThreadCount),HX_("_workingThreadCount",93,61,fd,f4)},
	{::hx::fsObject /*  ::hx::concurrent::collection::Queue */ ,(int)offsetof(ThreadPool_obj,_workQueue),HX_("_workQueue",c1,41,90,74)},
	{::hx::fsInt,(int)offsetof(ThreadPool_obj,threadCount),HX_("threadCount",a5,dd,53,9e)},
	{::hx::fsFloat,(int)offsetof(ThreadPool_obj,pollPeriod),HX_("pollPeriod",a0,0c,47,b3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ThreadPool_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &ThreadPool_obj::DEFAULT_POLL_PERIOD,HX_("DEFAULT_POLL_PERIOD",63,f6,b8,cd)},
	{::hx::fsObject /*  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl */ ,(void *) &ThreadPool_obj::_threadIDs,HX_("_threadIDs",6f,fb,4d,30)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ThreadPool_obj_sMemberFields[] = {
	HX_("_spawnedThreadCount",8a,28,5a,84),
	HX_("_workingThreadCount",93,61,fd,f4),
	HX_("_workQueue",c1,41,90,74),
	HX_("threadCount",a5,dd,53,9e),
	HX_("pollPeriod",a0,0c,47,b3),
	HX_("set_pollPeriod",5d,7d,5c,49),
	HX_("get_executingTasks",45,be,f6,7a),
	HX_("get_pendingTasks",40,c6,35,c7),
	HX_("awaitCompletion",12,36,2e,b5),
	HX_("cancelPendingTasks",51,62,48,b5),
	HX_("onStart",c3,12,49,1a),
	HX_("submit",18,58,06,9a),
	HX_("stop",02,f0,5b,4c),
	::String(null()) };

static void ThreadPool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ThreadPool_obj::DEFAULT_POLL_PERIOD,"DEFAULT_POLL_PERIOD");
	HX_MARK_MEMBER_NAME(ThreadPool_obj::_threadIDs,"_threadIDs");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ThreadPool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ThreadPool_obj::DEFAULT_POLL_PERIOD,"DEFAULT_POLL_PERIOD");
	HX_VISIT_MEMBER_NAME(ThreadPool_obj::_threadIDs,"_threadIDs");
};

#endif

::hx::Class ThreadPool_obj::__mClass;

static ::String ThreadPool_obj_sStaticFields[] = {
	HX_("DEFAULT_POLL_PERIOD",63,f6,b8,cd),
	HX_("_threadIDs",6f,fb,4d,30),
	::String(null())
};

void ThreadPool_obj::__register()
{
	ThreadPool_obj _hx_dummy;
	ThreadPool_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.thread.ThreadPool",31,d6,ff,95);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ThreadPool_obj::__GetStatic;
	__mClass->mSetStaticField = &ThreadPool_obj::__SetStatic;
	__mClass->mMarkFunc = ThreadPool_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ThreadPool_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ThreadPool_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ThreadPool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ThreadPool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ThreadPool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ThreadPool_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ThreadPool_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_20_boot)
HXDLIN(  20)		DEFAULT_POLL_PERIOD = ((Float)0.001);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_da3e9ba3734f54a4_22_boot)
HXDLIN(  22)		_threadIDs =  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl_obj::__alloc( HX_CTX ,0);
            	}
}

} // end namespace hx
} // end namespace concurrent
} // end namespace thread
