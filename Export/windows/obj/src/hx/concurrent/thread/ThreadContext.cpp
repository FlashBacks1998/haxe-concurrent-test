// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hx_concurrent_thread_ThreadContext
#include <hx/concurrent/thread/ThreadContext.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e5d97d55cd48bd37_168_new,"hx.concurrent.thread.ThreadContext","new",0x8d4789ac,"hx.concurrent.thread.ThreadContext.new","hx/concurrent/thread/ThreadPool.hx",168,0x8b41f22c)
namespace hx{
namespace concurrent{
namespace thread{

void ThreadContext_obj::__construct(int id){
            	HX_GC_STACKFRAME(&_hx_pos_e5d97d55cd48bd37_168_new)
HXLINE( 173)		this->vars =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 177)		this->id = id;
            	}

Dynamic ThreadContext_obj::__CreateEmpty() { return new ThreadContext_obj; }

void *ThreadContext_obj::_hx_vtable = 0;

Dynamic ThreadContext_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ThreadContext_obj > _hx_result = new ThreadContext_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ThreadContext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2bfce36c;
}


::hx::ObjectPtr< ThreadContext_obj > ThreadContext_obj::__new(int id) {
	::hx::ObjectPtr< ThreadContext_obj > __this = new ThreadContext_obj();
	__this->__construct(id);
	return __this;
}

::hx::ObjectPtr< ThreadContext_obj > ThreadContext_obj::__alloc(::hx::Ctx *_hx_ctx,int id) {
	ThreadContext_obj *__this = (ThreadContext_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ThreadContext_obj), true, "hx.concurrent.thread.ThreadContext"));
	*(void **)__this = ThreadContext_obj::_hx_vtable;
	__this->__construct(id);
	return __this;
}

ThreadContext_obj::ThreadContext_obj()
{
}

void ThreadContext_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ThreadContext);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(vars,"vars");
	HX_MARK_END_CLASS();
}

void ThreadContext_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(vars,"vars");
}

::hx::Val ThreadContext_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { return ::hx::Val( vars ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ThreadContext_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { vars=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ThreadContext_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("vars",ac,2b,49,4e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ThreadContext_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ThreadContext_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ThreadContext_obj,vars),HX_("vars",ac,2b,49,4e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ThreadContext_obj_sStaticStorageInfo = 0;
#endif

static ::String ThreadContext_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("vars",ac,2b,49,4e),
	::String(null()) };

::hx::Class ThreadContext_obj::__mClass;

void ThreadContext_obj::__register()
{
	ThreadContext_obj _hx_dummy;
	ThreadContext_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.thread.ThreadContext",ba,83,06,dd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ThreadContext_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ThreadContext_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ThreadContext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ThreadContext_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace concurrent
} // end namespace thread
