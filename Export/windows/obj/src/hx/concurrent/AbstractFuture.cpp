// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_hx_concurrent_AbstractFuture
#include <hx/concurrent/AbstractFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_Future
#include <hx/concurrent/Future.h>
#endif
#ifndef INCLUDED_hx_concurrent_FutureResult
#include <hx/concurrent/FutureResult.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_AbstractAcquirable
#include <hx/concurrent/lock/AbstractAcquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_Acquirable
#include <hx/concurrent/lock/Acquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_RLock
#include <hx/concurrent/lock/RLock.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0b166b20a6563d34_62_new,"hx.concurrent.AbstractFuture","new",0x52de9e50,"hx.concurrent.AbstractFuture.new","hx/concurrent/Future.hx",62,0x6ea4a7c2)
HX_LOCAL_STACK_FRAME(_hx_pos_0b166b20a6563d34_75_isComplete,"hx.concurrent.AbstractFuture","isComplete",0x71dae2d3,"hx.concurrent.AbstractFuture.isComplete","hx/concurrent/Future.hx",75,0x6ea4a7c2)
HX_LOCAL_STACK_FRAME(_hx_pos_0b166b20a6563d34_82_onCompletion,"hx.concurrent.AbstractFuture","onCompletion",0xce9f612b,"hx.concurrent.AbstractFuture.onCompletion","hx/concurrent/Future.hx",82,0x6ea4a7c2)
HX_LOCAL_STACK_FRAME(_hx_pos_0b166b20a6563d34_81_onCompletion,"hx.concurrent.AbstractFuture","onCompletion",0xce9f612b,"hx.concurrent.AbstractFuture.onCompletion","hx/concurrent/Future.hx",81,0x6ea4a7c2)
namespace hx{
namespace concurrent{

void AbstractFuture_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_0b166b20a6563d34_62_new)
HXLINE(  65)		this->sync =  ::hx::concurrent::lock::RLock_obj::__alloc( HX_CTX );
HXLINE(  64)		this->completionListeners = ::Array_obj< ::Dynamic>::__new();
HXLINE(  72)		this->result = ::hx::concurrent::FutureResult_obj::PENDING(::hx::ObjectPtr<OBJ_>(this));
            	}

bool AbstractFuture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x77d6e8d0;
}

static ::hx::concurrent::Future_obj _hx_hx_concurrent_AbstractFuture__hx_hx_concurrent_Future= {
	( bool (::hx::Object::*)())&::hx::concurrent::AbstractFuture_obj::isComplete,
	( void (::hx::Object::*)( ::Dynamic))&::hx::concurrent::AbstractFuture_obj::onCompletion,
};

void *AbstractFuture_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdec70c2a: return &_hx_hx_concurrent_AbstractFuture__hx_hx_concurrent_Future;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

bool AbstractFuture_obj::isComplete(){
            	HX_STACKFRAME(&_hx_pos_0b166b20a6563d34_75_isComplete)
HXDLIN(  75)		 ::hx::concurrent::FutureResult _g = this->result;
HXDLIN(  75)		if ((_g->_hx_getIndex() == 2)) {
HXLINE(  76)			::Dynamic _g1 = _g->_hx_getObject(0);
HXDLIN(  76)			return false;
            		}
            		else {
HXLINE(  77)			return true;
            		}
HXLINE(  75)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbstractFuture_obj,isComplete,return )

void AbstractFuture_obj::onCompletion( ::Dynamic listener){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,listener, ::hx::concurrent::AbstractFuture,_gthis) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_0b166b20a6563d34_82_onCompletion)
HXLINE(  84)			{
HXLINE(  84)				 ::hx::concurrent::FutureResult _g = _gthis->result;
HXDLIN(  84)				if ((_g->_hx_getIndex() == 2)) {
HXLINE(  85)					::Dynamic _g1 = _g->_hx_getObject(0);
            				}
            				else {
HXLINE(  86)					listener(_gthis->result);
            				}
            			}
HXLINE(  88)			return _gthis->completionListeners->push(listener);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_0b166b20a6563d34_81_onCompletion)
HXDLIN(  81)		 ::hx::concurrent::AbstractFuture _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  82)		this->sync->execute( ::Dynamic(new _hx_Closure_0(listener,_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractFuture_obj,onCompletion,(void))


AbstractFuture_obj::AbstractFuture_obj()
{
}

void AbstractFuture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AbstractFuture);
	HX_MARK_MEMBER_NAME(completionListeners,"completionListeners");
	HX_MARK_MEMBER_NAME(sync,"sync");
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_END_CLASS();
}

void AbstractFuture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(completionListeners,"completionListeners");
	HX_VISIT_MEMBER_NAME(sync,"sync");
	HX_VISIT_MEMBER_NAME(result,"result");
}

::hx::Val AbstractFuture_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sync") ) { return ::hx::Val( sync ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return ::hx::Val( result ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isComplete") ) { return ::hx::Val( isComplete_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onCompletion") ) { return ::hx::Val( onCompletion_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"completionListeners") ) { return ::hx::Val( completionListeners ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AbstractFuture_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sync") ) { sync=inValue.Cast<  ::hx::concurrent::lock::RLock >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast<  ::hx::concurrent::FutureResult >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"completionListeners") ) { completionListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AbstractFuture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("completionListeners",c3,36,5d,25));
	outFields->push(HX_("sync",5b,ba,5f,4c));
	outFields->push(HX_("result",dd,68,84,08));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AbstractFuture_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(AbstractFuture_obj,completionListeners),HX_("completionListeners",c3,36,5d,25)},
	{::hx::fsObject /*  ::hx::concurrent::lock::RLock */ ,(int)offsetof(AbstractFuture_obj,sync),HX_("sync",5b,ba,5f,4c)},
	{::hx::fsObject /*  ::hx::concurrent::FutureResult */ ,(int)offsetof(AbstractFuture_obj,result),HX_("result",dd,68,84,08)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AbstractFuture_obj_sStaticStorageInfo = 0;
#endif

static ::String AbstractFuture_obj_sMemberFields[] = {
	HX_("completionListeners",c3,36,5d,25),
	HX_("sync",5b,ba,5f,4c),
	HX_("result",dd,68,84,08),
	HX_("isComplete",c3,12,77,fa),
	HX_("onCompletion",1b,6d,9b,da),
	::String(null()) };

::hx::Class AbstractFuture_obj::__mClass;

void AbstractFuture_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.AbstractFuture",5e,76,85,25);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AbstractFuture_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AbstractFuture_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AbstractFuture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AbstractFuture_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace concurrent
