// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hx_concurrent_AbstractFuture
#include <hx/concurrent/AbstractFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_CompletableFuture
#include <hx/concurrent/CompletableFuture.h>
#endif
#ifndef INCLUDED_hx_concurrent_ConcurrentException
#include <hx/concurrent/ConcurrentException.h>
#endif
#ifndef INCLUDED_hx_concurrent_Future
#include <hx/concurrent/Future.h>
#endif
#ifndef INCLUDED_hx_concurrent_FutureResult
#include <hx/concurrent/FutureResult.h>
#endif
#ifndef INCLUDED_hx_concurrent_internal__Either2__Either2
#include <hx/concurrent/internal/_Either2/_Either2.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_AbstractAcquirable
#include <hx/concurrent/lock/AbstractAcquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_Acquirable
#include <hx/concurrent/lock/Acquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_RLock
#include <hx/concurrent/lock/RLock.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ed378ccc98a6b670_101_new,"hx.concurrent.CompletableFuture","new",0xd74c69a2,"hx.concurrent.CompletableFuture.new","hx/concurrent/Future.hx",101,0x6ea4a7c2)
HX_LOCAL_STACK_FRAME(_hx_pos_ed378ccc98a6b670_107_complete,"hx.concurrent.CompletableFuture","complete",0x63929837,"hx.concurrent.CompletableFuture.complete","hx/concurrent/Future.hx",107,0x6ea4a7c2)
HX_LOCAL_STACK_FRAME(_hx_pos_ed378ccc98a6b670_106_complete,"hx.concurrent.CompletableFuture","complete",0x63929837,"hx.concurrent.CompletableFuture.complete","hx/concurrent/Future.hx",106,0x6ea4a7c2)
namespace hx{
namespace concurrent{

void CompletableFuture_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ed378ccc98a6b670_101_new)
HXDLIN( 101)		super::__construct();
            	}

Dynamic CompletableFuture_obj::__CreateEmpty() { return new CompletableFuture_obj; }

void *CompletableFuture_obj::_hx_vtable = 0;

Dynamic CompletableFuture_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CompletableFuture_obj > _hx_result = new CompletableFuture_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CompletableFuture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1af78b62) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1af78b62;
	} else {
		return inClassId==(int)0x77d6e8d0;
	}
}

bool CompletableFuture_obj::complete( ::hx::concurrent::internal::_Either2::_Either2 result,::hx::Null< bool >  __o_overwriteResult){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::hx::concurrent::CompletableFuture,_gthis, ::hx::concurrent::internal::_Either2::_Either2,result,bool,overwriteResult) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_ed378ccc98a6b670_107_complete)
HXLINE( 108)			bool _hx_tmp;
HXDLIN( 108)			if (!(overwriteResult)) {
HXLINE( 108)				_hx_tmp = !(_gthis->isComplete());
            			}
            			else {
HXLINE( 108)				_hx_tmp = true;
            			}
HXDLIN( 108)			if (_hx_tmp) {
HXLINE( 109)				{
HXLINE( 109)					 ::hx::concurrent::internal::_Either2::_Either2 _g = result;
HXDLIN( 109)					switch((int)(_g->_hx_getIndex())){
            						case (int)0: {
HXLINE( 110)							 ::Dynamic value = _g->_hx_getObject(0);
HXDLIN( 110)							Float _hx_tmp1 = (::Sys_obj::time() * ( (Float)(1000) ));
HXDLIN( 110)							_gthis->result = ::hx::concurrent::FutureResult_obj::VALUE(value,_hx_tmp1,_gthis);
            						}
            						break;
            						case (int)1: {
HXLINE( 111)							 ::hx::concurrent::ConcurrentException ex = ( ( ::hx::concurrent::ConcurrentException)(_g->_hx_getObject(0)) );
HXDLIN( 111)							Float _hx_tmp2 = (::Sys_obj::time() * ( (Float)(1000) ));
HXDLIN( 111)							_gthis->result = ::hx::concurrent::FutureResult_obj::FAILURE(ex,_hx_tmp2,_gthis);
            						}
            						break;
            					}
            				}
HXLINE( 113)				{
HXLINE( 113)					int _g1 = 0;
HXDLIN( 113)					::Array< ::Dynamic> _g2 = _gthis->completionListeners;
HXDLIN( 113)					while((_g1 < _g2->length)){
HXLINE( 113)						 ::Dynamic listener = _g2->__get(_g1);
HXDLIN( 113)						_g1 = (_g1 + 1);
HXLINE( 114)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 115)							listener(_gthis->result);
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g3 = _hx_e;
HXLINE( 116)								 ::haxe::Exception ex1 = ::haxe::Exception_obj::caught(_g3);
HXLINE( 117)								::haxe::Log_obj::trace(ex1,::hx::SourceInfo(HX_("hx/concurrent/Future.hx",c2,a7,a4,6e),117,HX_("hx.concurrent.CompletableFuture",b0,b0,f2,7a),HX_("complete",b9,00,c8,7f)));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            				}
HXLINE( 118)				return true;
            			}
HXLINE( 120)			return false;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		bool overwriteResult = __o_overwriteResult.Default(false);
            	HX_STACKFRAME(&_hx_pos_ed378ccc98a6b670_106_complete)
HXDLIN( 106)		 ::hx::concurrent::CompletableFuture _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 107)		return ( (bool)(this->sync->execute( ::Dynamic(new _hx_Closure_0(_gthis,result,overwriteResult)),null())) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(CompletableFuture_obj,complete,return )


::hx::ObjectPtr< CompletableFuture_obj > CompletableFuture_obj::__new() {
	::hx::ObjectPtr< CompletableFuture_obj > __this = new CompletableFuture_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CompletableFuture_obj > CompletableFuture_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CompletableFuture_obj *__this = (CompletableFuture_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CompletableFuture_obj), true, "hx.concurrent.CompletableFuture"));
	*(void **)__this = CompletableFuture_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CompletableFuture_obj::CompletableFuture_obj()
{
}

::hx::Val CompletableFuture_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"complete") ) { return ::hx::Val( complete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CompletableFuture_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CompletableFuture_obj_sStaticStorageInfo = 0;
#endif

static ::String CompletableFuture_obj_sMemberFields[] = {
	HX_("complete",b9,00,c8,7f),
	::String(null()) };

::hx::Class CompletableFuture_obj::__mClass;

void CompletableFuture_obj::__register()
{
	CompletableFuture_obj _hx_dummy;
	CompletableFuture_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.CompletableFuture",b0,b0,f2,7a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CompletableFuture_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CompletableFuture_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CompletableFuture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CompletableFuture_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace concurrent
