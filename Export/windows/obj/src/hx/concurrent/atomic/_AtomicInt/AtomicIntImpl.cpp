// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_hx_concurrent_atomic__AtomicInt_AtomicIntImpl
#include <hx/concurrent/atomic/_AtomicInt/AtomicIntImpl.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_AbstractAcquirable
#include <hx/concurrent/lock/AbstractAcquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_Acquirable
#include <hx/concurrent/lock/Acquirable.h>
#endif
#ifndef INCLUDED_hx_concurrent_lock_RLock
#include <hx/concurrent/lock/RLock.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c47674c7aa0f0848_80_new,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl","new",0x26e77b97,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl.new","hx/concurrent/atomic/AtomicInt.hx",80,0x1c4debc5)
HX_LOCAL_STACK_FRAME(_hx_pos_c47674c7aa0f0848_114_get_value,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl","get_value",0x11a44a3f,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl.get_value","hx/concurrent/atomic/AtomicInt.hx",114,0x1c4debc5)
HX_LOCAL_STACK_FRAME(_hx_pos_c47674c7aa0f0848_120_set_value,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl","set_value",0xf4f5364b,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl.set_value","hx/concurrent/atomic/AtomicInt.hx",120,0x1c4debc5)
HX_LOCAL_STACK_FRAME(_hx_pos_c47674c7aa0f0848_140_getAndIncrement,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl","getAndIncrement",0x2430cfc5,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl.getAndIncrement","hx/concurrent/atomic/AtomicInt.hx",140,0x1c4debc5)
HX_LOCAL_STACK_FRAME(_hx_pos_c47674c7aa0f0848_155_incrementAndGet,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl","incrementAndGet",0xbb514745,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl.incrementAndGet","hx/concurrent/atomic/AtomicInt.hx",155,0x1c4debc5)
namespace hx{
namespace concurrent{
namespace atomic{
namespace _AtomicInt{

void AtomicIntImpl_obj::__construct(::hx::Null< int >  __o_initialValue){
            		int initialValue = __o_initialValue.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_c47674c7aa0f0848_80_new)
HXLINE( 111)		this->lock =  ::hx::concurrent::lock::RLock_obj::__alloc( HX_CTX );
HXLINE( 130)		this->_value = initialValue;
            	}

Dynamic AtomicIntImpl_obj::__CreateEmpty() { return new AtomicIntImpl_obj; }

void *AtomicIntImpl_obj::_hx_vtable = 0;

Dynamic AtomicIntImpl_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AtomicIntImpl_obj > _hx_result = new AtomicIntImpl_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AtomicIntImpl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6937752d;
}

int AtomicIntImpl_obj::get_value(){
            	HX_STACKFRAME(&_hx_pos_c47674c7aa0f0848_114_get_value)
HXLINE( 115)		this->lock->acquire();
HXLINE( 116)		int result = this->_value;
HXLINE( 117)		this->lock->release();
HXLINE( 118)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AtomicIntImpl_obj,get_value,return )

int AtomicIntImpl_obj::set_value(int val){
            	HX_STACKFRAME(&_hx_pos_c47674c7aa0f0848_120_set_value)
HXLINE( 121)		this->lock->acquire();
HXLINE( 122)		this->_value = val;
HXLINE( 123)		this->lock->release();
HXLINE( 124)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AtomicIntImpl_obj,set_value,return )

int AtomicIntImpl_obj::getAndIncrement(::hx::Null< int >  __o_amount){
            		int amount = __o_amount.Default(1);
            	HX_STACKFRAME(&_hx_pos_c47674c7aa0f0848_140_getAndIncrement)
HXLINE( 141)		this->lock->acquire();
HXLINE( 142)		int old = this->_value;
HXLINE( 143)		 ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 143)		_hx_tmp->_value = (_hx_tmp->_value + amount);
HXLINE( 144)		this->lock->release();
HXLINE( 145)		return old;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AtomicIntImpl_obj,getAndIncrement,return )

int AtomicIntImpl_obj::incrementAndGet(::hx::Null< int >  __o_amount){
            		int amount = __o_amount.Default(1);
            	HX_STACKFRAME(&_hx_pos_c47674c7aa0f0848_155_incrementAndGet)
HXLINE( 156)		this->lock->acquire();
HXLINE( 157)		 ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl result = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 157)		result->_value = (result->_value + amount);
HXDLIN( 157)		int result1 = result->_value;
HXLINE( 158)		this->lock->release();
HXLINE( 159)		return result1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AtomicIntImpl_obj,incrementAndGet,return )


::hx::ObjectPtr< AtomicIntImpl_obj > AtomicIntImpl_obj::__new(::hx::Null< int >  __o_initialValue) {
	::hx::ObjectPtr< AtomicIntImpl_obj > __this = new AtomicIntImpl_obj();
	__this->__construct(__o_initialValue);
	return __this;
}

::hx::ObjectPtr< AtomicIntImpl_obj > AtomicIntImpl_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_initialValue) {
	AtomicIntImpl_obj *__this = (AtomicIntImpl_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AtomicIntImpl_obj), true, "hx.concurrent.atomic._AtomicInt.AtomicIntImpl"));
	*(void **)__this = AtomicIntImpl_obj::_hx_vtable;
	__this->__construct(__o_initialValue);
	return __this;
}

AtomicIntImpl_obj::AtomicIntImpl_obj()
{
}

void AtomicIntImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AtomicIntImpl);
	HX_MARK_MEMBER_NAME(lock,"lock");
	HX_MARK_MEMBER_NAME(_value,"_value");
	HX_MARK_END_CLASS();
}

void AtomicIntImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lock,"lock");
	HX_VISIT_MEMBER_NAME(_value,"_value");
}

::hx::Val AtomicIntImpl_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { return ::hx::Val( lock ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_value() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_value") ) { return ::hx::Val( _value ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_value") ) { return ::hx::Val( get_value_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return ::hx::Val( set_value_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getAndIncrement") ) { return ::hx::Val( getAndIncrement_dyn() ); }
		if (HX_FIELD_EQ(inName,"incrementAndGet") ) { return ::hx::Val( incrementAndGet_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AtomicIntImpl_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { lock=inValue.Cast<  ::hx::concurrent::lock::RLock >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_value(inValue.Cast< int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_value") ) { _value=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AtomicIntImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("lock",eb,9b,b7,47));
	outFields->push(HX_("_value",b2,c6,9f,2d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AtomicIntImpl_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hx::concurrent::lock::RLock */ ,(int)offsetof(AtomicIntImpl_obj,lock),HX_("lock",eb,9b,b7,47)},
	{::hx::fsInt,(int)offsetof(AtomicIntImpl_obj,_value),HX_("_value",b2,c6,9f,2d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AtomicIntImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String AtomicIntImpl_obj_sMemberFields[] = {
	HX_("lock",eb,9b,b7,47),
	HX_("_value",b2,c6,9f,2d),
	HX_("get_value",c8,db,61,75),
	HX_("set_value",d4,c7,b2,58),
	HX_("getAndIncrement",0e,ae,ed,5c),
	HX_("incrementAndGet",8e,25,0e,f4),
	::String(null()) };

::hx::Class AtomicIntImpl_obj::__mClass;

void AtomicIntImpl_obj::__register()
{
	AtomicIntImpl_obj _hx_dummy;
	AtomicIntImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.atomic._AtomicInt.AtomicIntImpl",25,64,56,45);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AtomicIntImpl_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AtomicIntImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AtomicIntImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AtomicIntImpl_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace concurrent
} // end namespace atomic
} // end namespace _AtomicInt
