// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_hx_concurrent_Service
#include <hx/concurrent/Service.h>
#endif
#ifndef INCLUDED_hx_concurrent_ServiceState
#include <hx/concurrent/ServiceState.h>
#endif

namespace hx{
namespace concurrent{


static ::String Service_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("state",11,76,0b,84),
	HX_("start",62,74,0b,84),
	HX_("stop",02,f0,5b,4c),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Service_obj::__mClass;

void Service_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.concurrent.Service",7c,4f,66,a1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Service_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TIsInterface< (int)0xa01a126e >;
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace concurrent
