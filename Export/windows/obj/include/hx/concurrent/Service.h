// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_Service
#define INCLUDED_hx_concurrent_Service

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hx,concurrent,Service)
HX_DECLARE_CLASS2(hx,concurrent,ServiceState)

namespace hx{
namespace concurrent{


class HXCPP_CLASS_ATTRIBUTES Service_obj {
	public:
		typedef ::hx::Object super;
		HX_DO_INTERFACE_RTTI;

		void (::hx::Object :: *_hx_start)(); 
		static inline void start( ::Dynamic _hx_) {
			(_hx_.mPtr->*( ::hx::interface_cast< ::hx::concurrent::Service_obj *>(_hx_.mPtr->_hx_getInterface(0xa01a126e)))->_hx_start)();
		}
		void (::hx::Object :: *_hx_stop)(); 
		static inline void stop( ::Dynamic _hx_) {
			(_hx_.mPtr->*( ::hx::interface_cast< ::hx::concurrent::Service_obj *>(_hx_.mPtr->_hx_getInterface(0xa01a126e)))->_hx_stop)();
		}
		::String (::hx::Object :: *_hx_toString)(); 
		static inline ::String toString( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::hx::concurrent::Service_obj *>(_hx_.mPtr->_hx_getInterface(0xa01a126e)))->_hx_toString)();
		}
};

} // end namespace hx
} // end namespace concurrent

#endif /* INCLUDED_hx_concurrent_Service */ 
