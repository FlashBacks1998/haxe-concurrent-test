// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_collection_Queue
#define INCLUDED_hx_concurrent_collection_Queue

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(hx,concurrent,atomic,_AtomicInt,AtomicIntImpl)
HX_DECLARE_CLASS3(hx,concurrent,collection,Queue)
HX_DECLARE_CLASS2(sys,thread,Deque)

namespace hx{
namespace concurrent{
namespace collection{


class HXCPP_CLASS_ATTRIBUTES Queue_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Queue_obj OBJ_;
		Queue_obj();

	public:
		enum { _hx_ClassId = 0x16c678ec };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.collection.Queue")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.collection.Queue"); }
		static ::hx::ObjectPtr< Queue_obj > __new();
		static ::hx::ObjectPtr< Queue_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Queue_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Queue",71,fd,17,f1); }

		 ::sys::thread::Deque _queue;
		 ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl _length;
		int get_length();
		::Dynamic get_length_dyn();

		 ::Dynamic pop(::hx::Null< int >  timeoutMS);
		::Dynamic pop_dyn();

		void pushHead( ::Dynamic msg);
		::Dynamic pushHead_dyn();

		void push( ::Dynamic msg);
		::Dynamic push_dyn();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace collection

#endif /* INCLUDED_hx_concurrent_collection_Queue */ 
