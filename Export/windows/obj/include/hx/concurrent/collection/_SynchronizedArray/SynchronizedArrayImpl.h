// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_collection__SynchronizedArray_SynchronizedArrayImpl
#define INCLUDED_hx_concurrent_collection__SynchronizedArray_SynchronizedArrayImpl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_collection_OrderedCollection
#include <hx/concurrent/collection/OrderedCollection.h>
#endif
HX_DECLARE_CLASS3(hx,concurrent,collection,Collection)
HX_DECLARE_CLASS3(hx,concurrent,collection,OrderedCollection)
HX_DECLARE_CLASS4(hx,concurrent,collection,_SynchronizedArray,SynchronizedArrayImpl)
HX_DECLARE_CLASS4(hx,concurrent,internal,_Either3,_Either3)
HX_DECLARE_CLASS3(hx,concurrent,lock,AbstractAcquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,Acquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,RLock)

namespace hx{
namespace concurrent{
namespace collection{
namespace _SynchronizedArray{


class HXCPP_CLASS_ATTRIBUTES SynchronizedArrayImpl_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SynchronizedArrayImpl_obj OBJ_;
		SynchronizedArrayImpl_obj();

	public:
		enum { _hx_ClassId = 0x2429c7d6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.collection._SynchronizedArray.SynchronizedArrayImpl")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.collection._SynchronizedArray.SynchronizedArrayImpl"); }
		static ::hx::ObjectPtr< SynchronizedArrayImpl_obj > __new();
		static ::hx::ObjectPtr< SynchronizedArrayImpl_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SynchronizedArrayImpl_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::Dynamic copy_ee952b4b();

		::Dynamic map_881a854a( ::Dynamic fn);

		::Dynamic filter_881a854a( ::Dynamic fn);
		::String __ToString() const { return HX_("SynchronizedArrayImpl",45,eb,7f,05); }

		::cpp::VirtualArray _items;
		 ::hx::concurrent::lock::RLock _sync;
		void set(int idx, ::Dynamic x);
		::Dynamic set_dyn();

		 ::Dynamic get_first();
		::Dynamic get_first_dyn();

		 ::Dynamic get_last();
		::Dynamic get_last_dyn();

		int get_length();
		::Dynamic get_length_dyn();

		void add( ::Dynamic item);
		::Dynamic add_dyn();

		bool addIfAbsent( ::Dynamic item);
		::Dynamic addIfAbsent_dyn();

		void addAll( ::hx::concurrent::internal::_Either3::_Either3 coll);
		::Dynamic addAll_dyn();

		void clear();
		::Dynamic clear_dyn();

		void insertAt(int idx, ::Dynamic x);
		::Dynamic insertAt_dyn();

		bool remove( ::Dynamic x);
		::Dynamic remove_dyn();

		 ::Dynamic removeAt(int idx,::hx::Null< bool >  throwIfOutOfRange);
		::Dynamic removeAt_dyn();

		 ::Dynamic removeFirst(::hx::Null< bool >  throwIfEmpty);
		::Dynamic removeFirst_dyn();

		 ::Dynamic removeLast(::hx::Null< bool >  throwIfEmpty);
		::Dynamic removeLast_dyn();

		 ::hx::concurrent::collection::_SynchronizedArray::SynchronizedArrayImpl copy();
		::Dynamic copy_dyn();

		bool contains( ::Dynamic x);
		::Dynamic contains_dyn();

		bool isEmpty();
		::Dynamic isEmpty_dyn();

		 ::Dynamic get(int idx,::hx::Null< bool >  throwIfOutOfRange);
		::Dynamic get_dyn();

		int indexOf( ::Dynamic x,::hx::Null< int >  startAt);
		::Dynamic indexOf_dyn();

		int lastIndexOf( ::Dynamic x, ::Dynamic startAt);
		::Dynamic lastIndexOf_dyn();

		 ::hx::concurrent::collection::_SynchronizedArray::SynchronizedArrayImpl filter( ::Dynamic fn);
		::Dynamic filter_dyn();

		 ::hx::concurrent::collection::_SynchronizedArray::SynchronizedArrayImpl map( ::Dynamic fn);
		::Dynamic map_dyn();

		::String join(::String sep);
		::Dynamic join_dyn();

		 ::Dynamic iterator();
		::Dynamic iterator_dyn();

		::cpp::VirtualArray toArray();
		::Dynamic toArray_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace collection
} // end namespace _SynchronizedArray

#endif /* INCLUDED_hx_concurrent_collection__SynchronizedArray_SynchronizedArrayImpl */ 
