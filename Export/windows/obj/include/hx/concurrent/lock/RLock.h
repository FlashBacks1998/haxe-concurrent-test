// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_lock_RLock
#define INCLUDED_hx_concurrent_lock_RLock

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_lock_AbstractAcquirable
#include <hx/concurrent/lock/AbstractAcquirable.h>
#endif
HX_DECLARE_CLASS3(hx,concurrent,lock,AbstractAcquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,Acquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,RLock)
HX_DECLARE_CLASS2(sys,thread,Mutex)

namespace hx{
namespace concurrent{
namespace lock{


class HXCPP_CLASS_ATTRIBUTES RLock_obj : public  ::hx::concurrent::lock::AbstractAcquirable_obj
{
	public:
		typedef  ::hx::concurrent::lock::AbstractAcquirable_obj super;
		typedef RLock_obj OBJ_;
		RLock_obj();

	public:
		enum { _hx_ClassId = 0x11fdfc63 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.lock.RLock")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.lock.RLock"); }
		static ::hx::ObjectPtr< RLock_obj > __new();
		static ::hx::ObjectPtr< RLock_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RLock_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RLock",5d,59,6c,69); }

		static void __boot();
		static bool isSupported;
		 ::sys::thread::Mutex _rlock;
		 ::Dynamic _holder;
		int _holderEntranceCount;
		int get_availablePermits();

		bool get_isAcquiredByAnyThread();
		::Dynamic get_isAcquiredByAnyThread_dyn();

		bool get_isAcquiredByCurrentThread();
		::Dynamic get_isAcquiredByCurrentThread_dyn();

		bool get_isAcquiredByOtherThread();
		::Dynamic get_isAcquiredByOtherThread_dyn();

		void acquire();

		bool tryAcquire(::hx::Null< int >  timeoutMS);

		bool tryAcquireInternal(::hx::Null< int >  timeoutMS);
		::Dynamic tryAcquireInternal_dyn();

		void release();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace lock

#endif /* INCLUDED_hx_concurrent_lock_RLock */ 
