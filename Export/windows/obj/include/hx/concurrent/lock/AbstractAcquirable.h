// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_lock_AbstractAcquirable
#define INCLUDED_hx_concurrent_lock_AbstractAcquirable

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_lock_Acquirable
#include <hx/concurrent/lock/Acquirable.h>
#endif
HX_DECLARE_CLASS3(hx,concurrent,lock,AbstractAcquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,Acquirable)

namespace hx{
namespace concurrent{
namespace lock{


class HXCPP_CLASS_ATTRIBUTES AbstractAcquirable_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AbstractAcquirable_obj OBJ_;
		AbstractAcquirable_obj();

	public:
		enum { _hx_ClassId = 0x22633cdd };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hx.concurrent.lock.AbstractAcquirable")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hx.concurrent.lock.AbstractAcquirable"); }

		//~AbstractAcquirable_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("AbstractAcquirable",6b,b6,b2,40); }

		virtual bool tryAcquire(int timeoutMS) { return 0; }
		::Dynamic tryAcquire_dyn();
		virtual void release() {}
		::Dynamic release_dyn();
		virtual void acquire() {}
		::Dynamic acquire_dyn();
		virtual int get_availablePermits() { return 0; }
		::Dynamic get_availablePermits_dyn();
		 ::Dynamic execute( ::Dynamic func,::hx::Null< bool >  swallowExceptions);
		::Dynamic execute_dyn();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace lock

#endif /* INCLUDED_hx_concurrent_lock_AbstractAcquirable */ 
