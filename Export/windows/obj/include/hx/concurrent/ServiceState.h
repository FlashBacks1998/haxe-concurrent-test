// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_ServiceState
#define INCLUDED_hx_concurrent_ServiceState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hx,concurrent,ServiceState)
namespace hx{
namespace concurrent{


class ServiceState_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef ServiceState_obj OBJ_;

	public:
		ServiceState_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("hx.concurrent.ServiceState",f5,f4,d4,69); }
		::String __ToString() const { return HX_("ServiceState.",f2,4e,5c,d9) + _hx_tag; }

		static ::hx::concurrent::ServiceState RUNNING;
		static inline ::hx::concurrent::ServiceState RUNNING_dyn() { return RUNNING; }
		static ::hx::concurrent::ServiceState STARTING;
		static inline ::hx::concurrent::ServiceState STARTING_dyn() { return STARTING; }
		static ::hx::concurrent::ServiceState STOPPED;
		static inline ::hx::concurrent::ServiceState STOPPED_dyn() { return STOPPED; }
		static ::hx::concurrent::ServiceState STOPPING;
		static inline ::hx::concurrent::ServiceState STOPPING_dyn() { return STOPPING; }
};

} // end namespace hx
} // end namespace concurrent

#endif /* INCLUDED_hx_concurrent_ServiceState */ 
