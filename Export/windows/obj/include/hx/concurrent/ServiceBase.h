// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_ServiceBase
#define INCLUDED_hx_concurrent_ServiceBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_Service
#include <hx/concurrent/Service.h>
#endif
HX_DECLARE_CLASS2(hx,concurrent,Service)
HX_DECLARE_CLASS2(hx,concurrent,ServiceBase)
HX_DECLARE_CLASS2(hx,concurrent,ServiceState)
HX_DECLARE_CLASS4(hx,concurrent,atomic,_AtomicInt,AtomicIntImpl)
HX_DECLARE_CLASS3(hx,concurrent,lock,AbstractAcquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,Acquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,RLock)

namespace hx{
namespace concurrent{


class HXCPP_CLASS_ATTRIBUTES ServiceBase_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ServiceBase_obj OBJ_;
		ServiceBase_obj();

	public:
		enum { _hx_ClassId = 0x7b12badf };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.ServiceBase")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.ServiceBase"); }

		//~ServiceBase_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ServiceBase",c6,86,44,e9); }

		static void __boot();
		static  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl _ids;
		int id;
		 ::hx::concurrent::ServiceState state;
		 ::hx::concurrent::ServiceState set_state( ::hx::concurrent::ServiceState s);
		::Dynamic set_state_dyn();

		 ::hx::concurrent::lock::RLock _stateLock;
		void start();
		::Dynamic start_dyn();

		virtual void onStart();
		::Dynamic onStart_dyn();

		virtual void stop();
		::Dynamic stop_dyn();

		virtual void onStop();
		::Dynamic onStop_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace hx
} // end namespace concurrent

#endif /* INCLUDED_hx_concurrent_ServiceBase */ 
