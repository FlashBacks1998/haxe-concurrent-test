// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_Future
#define INCLUDED_hx_concurrent_Future

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hx,concurrent,Future)
HX_DECLARE_CLASS2(hx,concurrent,FutureResult)

namespace hx{
namespace concurrent{


class HXCPP_CLASS_ATTRIBUTES Future_obj {
	public:
		typedef ::hx::Object super;
		HX_DO_INTERFACE_RTTI;

		bool (::hx::Object :: *_hx_isComplete)(); 
		static inline bool isComplete( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::hx::concurrent::Future_obj *>(_hx_.mPtr->_hx_getInterface(0xdec70c2a)))->_hx_isComplete)();
		}
		void (::hx::Object :: *_hx_onCompletion)( ::Dynamic listener); 
		static inline void onCompletion( ::Dynamic _hx_, ::Dynamic listener) {
			(_hx_.mPtr->*( ::hx::interface_cast< ::hx::concurrent::Future_obj *>(_hx_.mPtr->_hx_getInterface(0xdec70c2a)))->_hx_onCompletion)(listener);
		}
};

} // end namespace hx
} // end namespace concurrent

#endif /* INCLUDED_hx_concurrent_Future */ 
