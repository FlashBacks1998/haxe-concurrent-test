// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_thread_Threads
#define INCLUDED_hx_concurrent_thread_Threads

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(hx,concurrent,thread,Threads)

namespace hx{
namespace concurrent{
namespace thread{


class HXCPP_CLASS_ATTRIBUTES Threads_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Threads_obj OBJ_;
		Threads_obj();

	public:
		enum { _hx_ClassId = 0x37095418 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hx.concurrent.thread.Threads")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hx.concurrent.thread.Threads"); }

		inline static ::hx::ObjectPtr< Threads_obj > __new() {
			::hx::ObjectPtr< Threads_obj > __this = new Threads_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Threads_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Threads_obj *__this = (Threads_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Threads_obj), false, "hx.concurrent.thread.Threads"));
			*(void **)__this = Threads_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Threads_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Threads",49,1e,e3,20); }

		static  ::Dynamic get_current();
		static ::Dynamic get_current_dyn();

		static bool get_isSupported();
		static ::Dynamic get_isSupported_dyn();

		static bool await( ::Dynamic condition,int timeoutMS,::hx::Null< int >  waitLoopSleepMS);
		static ::Dynamic await_dyn();

		static void sleep(int timeMS);
		static ::Dynamic sleep_dyn();

		static void spawn( ::Dynamic func);
		static ::Dynamic spawn_dyn();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace thread

#endif /* INCLUDED_hx_concurrent_thread_Threads */ 
