// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_thread_ThreadPool
#define INCLUDED_hx_concurrent_thread_ThreadPool

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_ServiceBase
#include <hx/concurrent/ServiceBase.h>
#endif
HX_DECLARE_CLASS2(hx,concurrent,Service)
HX_DECLARE_CLASS2(hx,concurrent,ServiceBase)
HX_DECLARE_CLASS4(hx,concurrent,atomic,_AtomicInt,AtomicIntImpl)
HX_DECLARE_CLASS3(hx,concurrent,collection,Queue)
HX_DECLARE_CLASS3(hx,concurrent,thread,ThreadContext)
HX_DECLARE_CLASS3(hx,concurrent,thread,ThreadPool)

namespace hx{
namespace concurrent{
namespace thread{


class HXCPP_CLASS_ATTRIBUTES ThreadPool_obj : public  ::hx::concurrent::ServiceBase_obj
{
	public:
		typedef  ::hx::concurrent::ServiceBase_obj super;
		typedef ThreadPool_obj OBJ_;
		ThreadPool_obj();

	public:
		enum { _hx_ClassId = 0x0c5e933f };

		void __construct(int numThreads,::hx::Null< bool >  __o_autostart);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.thread.ThreadPool")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.thread.ThreadPool"); }
		static ::hx::ObjectPtr< ThreadPool_obj > __new(int numThreads,::hx::Null< bool >  __o_autostart);
		static ::hx::ObjectPtr< ThreadPool_obj > __alloc(::hx::Ctx *_hx_ctx,int numThreads,::hx::Null< bool >  __o_autostart);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ThreadPool_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ThreadPool",e6,58,d6,3c); }

		static void __boot();
		static Float DEFAULT_POLL_PERIOD;
		static  ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl _threadIDs;
		 ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl _spawnedThreadCount;
		 ::hx::concurrent::atomic::_AtomicInt::AtomicIntImpl _workingThreadCount;
		 ::hx::concurrent::collection::Queue _workQueue;
		int threadCount;
		Float pollPeriod;
		Float set_pollPeriod(Float value);
		::Dynamic set_pollPeriod_dyn();

		int get_executingTasks();
		::Dynamic get_executingTasks_dyn();

		int get_pendingTasks();
		::Dynamic get_pendingTasks_dyn();

		bool awaitCompletion(int timeoutMS);
		::Dynamic awaitCompletion_dyn();

		int cancelPendingTasks();
		::Dynamic cancelPendingTasks_dyn();

		void onStart();

		void submit( ::Dynamic task);
		::Dynamic submit_dyn();

		void stop();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace thread

#endif /* INCLUDED_hx_concurrent_thread_ThreadPool */ 
