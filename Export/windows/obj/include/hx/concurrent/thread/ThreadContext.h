// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_thread_ThreadContext
#define INCLUDED_hx_concurrent_thread_ThreadContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS3(hx,concurrent,thread,ThreadContext)

namespace hx{
namespace concurrent{
namespace thread{


class HXCPP_CLASS_ATTRIBUTES ThreadContext_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ThreadContext_obj OBJ_;
		ThreadContext_obj();

	public:
		enum { _hx_ClassId = 0x2bfce36c };

		void __construct(int id);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.thread.ThreadContext")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.thread.ThreadContext"); }
		static ::hx::ObjectPtr< ThreadContext_obj > __new(int id);
		static ::hx::ObjectPtr< ThreadContext_obj > __alloc(::hx::Ctx *_hx_ctx,int id);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ThreadContext_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ThreadContext",25,e0,50,05); }

		int id;
		 ::haxe::ds::StringMap vars;
};

} // end namespace hx
} // end namespace concurrent
} // end namespace thread

#endif /* INCLUDED_hx_concurrent_thread_ThreadContext */ 
