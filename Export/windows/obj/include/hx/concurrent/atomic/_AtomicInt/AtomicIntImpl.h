// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_atomic__AtomicInt_AtomicIntImpl
#define INCLUDED_hx_concurrent_atomic__AtomicInt_AtomicIntImpl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(hx,concurrent,atomic,_AtomicInt,AtomicIntImpl)
HX_DECLARE_CLASS3(hx,concurrent,lock,AbstractAcquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,Acquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,RLock)

namespace hx{
namespace concurrent{
namespace atomic{
namespace _AtomicInt{


class HXCPP_CLASS_ATTRIBUTES AtomicIntImpl_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AtomicIntImpl_obj OBJ_;
		AtomicIntImpl_obj();

	public:
		enum { _hx_ClassId = 0x6937752d };

		void __construct(::hx::Null< int >  __o_initialValue);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.atomic._AtomicInt.AtomicIntImpl")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.atomic._AtomicInt.AtomicIntImpl"); }
		static ::hx::ObjectPtr< AtomicIntImpl_obj > __new(::hx::Null< int >  __o_initialValue);
		static ::hx::ObjectPtr< AtomicIntImpl_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_initialValue);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AtomicIntImpl_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AtomicIntImpl",a4,cb,38,b6); }

		 ::hx::concurrent::lock::RLock lock;
		int _value;
		int get_value();
		::Dynamic get_value_dyn();

		int set_value(int val);
		::Dynamic set_value_dyn();

		int getAndIncrement(::hx::Null< int >  amount);
		::Dynamic getAndIncrement_dyn();

		int incrementAndGet(::hx::Null< int >  amount);
		::Dynamic incrementAndGet_dyn();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace atomic
} // end namespace _AtomicInt

#endif /* INCLUDED_hx_concurrent_atomic__AtomicInt_AtomicIntImpl */ 
