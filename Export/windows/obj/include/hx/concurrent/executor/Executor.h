// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_executor_Executor
#define INCLUDED_hx_concurrent_executor_Executor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_ServiceBase
#include <hx/concurrent/ServiceBase.h>
#endif
HX_DECLARE_CLASS2(hx,concurrent,Future)
HX_DECLARE_CLASS2(hx,concurrent,FutureResult)
HX_DECLARE_CLASS2(hx,concurrent,Service)
HX_DECLARE_CLASS2(hx,concurrent,ServiceBase)
HX_DECLARE_CLASS3(hx,concurrent,collection,Collection)
HX_DECLARE_CLASS3(hx,concurrent,collection,OrderedCollection)
HX_DECLARE_CLASS4(hx,concurrent,collection,_CopyOnWriteArray,CopyOnWriteArrayImpl)
HX_DECLARE_CLASS3(hx,concurrent,executor,Executor)
HX_DECLARE_CLASS3(hx,concurrent,executor,Schedule)
HX_DECLARE_CLASS3(hx,concurrent,executor,TaskFuture)
HX_DECLARE_CLASS4(hx,concurrent,internal,_Either2,_Either2)

namespace hx{
namespace concurrent{
namespace executor{


class HXCPP_CLASS_ATTRIBUTES Executor_obj : public  ::hx::concurrent::ServiceBase_obj
{
	public:
		typedef  ::hx::concurrent::ServiceBase_obj super;
		typedef Executor_obj OBJ_;
		Executor_obj();

	public:
		enum { _hx_ClassId = 0x7e2f004d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.executor.Executor")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.executor.Executor"); }

		//~Executor_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Executor",73,a9,0d,99); }

		static void __boot();
		static  ::hx::concurrent::executor::Schedule NOW_ONCE;
		static  ::hx::concurrent::executor::Executor create(::hx::Null< int >  maxConcurrent,::hx::Null< bool >  autostart);
		static ::Dynamic create_dyn();

		 ::hx::concurrent::collection::_CopyOnWriteArray::CopyOnWriteArrayImpl completionListeners;
		void notifyResult( ::hx::concurrent::FutureResult result);
		::Dynamic notifyResult_dyn();

		void onCompletion( ::Dynamic listener);
		::Dynamic onCompletion_dyn();

		virtual ::Dynamic submit( ::hx::concurrent::internal::_Either2::_Either2 task, ::hx::concurrent::executor::Schedule schedule) { return 0; }
		::Dynamic submit_dyn();
		virtual void stop();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace executor

#endif /* INCLUDED_hx_concurrent_executor_Executor */ 
