// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_executor_TaskFuture
#define INCLUDED_hx_concurrent_executor_TaskFuture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_Future
#include <hx/concurrent/Future.h>
#endif
HX_DECLARE_CLASS2(hx,concurrent,Future)
HX_DECLARE_CLASS2(hx,concurrent,FutureResult)
HX_DECLARE_CLASS3(hx,concurrent,executor,Schedule)
HX_DECLARE_CLASS3(hx,concurrent,executor,TaskFuture)

namespace hx{
namespace concurrent{
namespace executor{


class HXCPP_CLASS_ATTRIBUTES TaskFuture_obj {
	public:
		typedef  ::hx::concurrent::Future_obj super;
		HX_DO_INTERFACE_RTTI;

		bool (::hx::Object :: *_hx_isComplete)(); 
		static inline bool isComplete( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::hx::concurrent::executor::TaskFuture_obj *>(_hx_.mPtr->_hx_getInterface(0x5801c022)))->_hx_isComplete)();
		}
		void (::hx::Object :: *_hx_onCompletion)( ::Dynamic listener); 
		static inline void onCompletion( ::Dynamic _hx_, ::Dynamic listener) {
			(_hx_.mPtr->*( ::hx::interface_cast< ::hx::concurrent::executor::TaskFuture_obj *>(_hx_.mPtr->_hx_getInterface(0x5801c022)))->_hx_onCompletion)(listener);
		}
		void (::hx::Object :: *_hx_cancel)(); 
		static inline void cancel( ::Dynamic _hx_) {
			(_hx_.mPtr->*( ::hx::interface_cast< ::hx::concurrent::executor::TaskFuture_obj *>(_hx_.mPtr->_hx_getInterface(0x5801c022)))->_hx_cancel)();
		}
		 ::hx::concurrent::FutureResult (::hx::Object :: *_hx_awaitCompletion)(int timeoutMS); 
		static inline  ::hx::concurrent::FutureResult awaitCompletion( ::Dynamic _hx_,int timeoutMS) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::hx::concurrent::executor::TaskFuture_obj *>(_hx_.mPtr->_hx_getInterface(0x5801c022)))->_hx_awaitCompletion)(timeoutMS);
		}
};

} // end namespace hx
} // end namespace concurrent
} // end namespace executor

#endif /* INCLUDED_hx_concurrent_executor_TaskFuture */ 
