// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_executor_Schedule
#define INCLUDED_hx_concurrent_executor_Schedule

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(hx,concurrent,executor,Schedule)
namespace hx{
namespace concurrent{
namespace executor{


class Schedule_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef Schedule_obj OBJ_;

	public:
		Schedule_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("hx.concurrent.executor.Schedule",19,a7,f5,78); }
		::String __ToString() const { return HX_("Schedule.",d7,21,45,ab) + _hx_tag; }

		static ::hx::concurrent::executor::Schedule DAILY( ::Dynamic hour, ::Dynamic minute, ::Dynamic second);
		static ::Dynamic DAILY_dyn();
		static ::hx::concurrent::executor::Schedule FIXED_DELAY(int intervalMS, ::Dynamic initialDelayMS);
		static ::Dynamic FIXED_DELAY_dyn();
		static ::hx::concurrent::executor::Schedule FIXED_RATE(int intervalMS, ::Dynamic initialDelayMS);
		static ::Dynamic FIXED_RATE_dyn();
		static ::hx::concurrent::executor::Schedule HOURLY( ::Dynamic minute, ::Dynamic second);
		static ::Dynamic HOURLY_dyn();
		static ::hx::concurrent::executor::Schedule ONCE( ::Dynamic initialDelayMS);
		static ::Dynamic ONCE_dyn();
		static ::hx::concurrent::executor::Schedule WEEKLY( ::Dynamic day, ::Dynamic hour, ::Dynamic minute, ::Dynamic second);
		static ::Dynamic WEEKLY_dyn();
};

} // end namespace hx
} // end namespace concurrent
} // end namespace executor

#endif /* INCLUDED_hx_concurrent_executor_Schedule */ 
