// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_executor_ScheduleTools
#define INCLUDED_hx_concurrent_executor_ScheduleTools

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(hx,concurrent,executor,Schedule)
HX_DECLARE_CLASS3(hx,concurrent,executor,ScheduleTools)

namespace hx{
namespace concurrent{
namespace executor{


class HXCPP_CLASS_ATTRIBUTES ScheduleTools_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ScheduleTools_obj OBJ_;
		ScheduleTools_obj();

	public:
		enum { _hx_ClassId = 0x1f113f0a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hx.concurrent.executor.ScheduleTools")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hx.concurrent.executor.ScheduleTools"); }

		inline static ::hx::ObjectPtr< ScheduleTools_obj > __new() {
			::hx::ObjectPtr< ScheduleTools_obj > __this = new ScheduleTools_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ScheduleTools_obj > __alloc(::hx::Ctx *_hx_ctx) {
			ScheduleTools_obj *__this = (ScheduleTools_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScheduleTools_obj), false, "hx.concurrent.executor.ScheduleTools"));
			*(void **)__this = ScheduleTools_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ScheduleTools_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ScheduleTools",24,ac,fd,60); }

		static void __boot();
		static int HOUR_IN_MS;
		static int DAY_IN_MS;
		static int WEEK_IN_MS;
		static  ::hx::concurrent::executor::Schedule applyDefaults( ::hx::concurrent::executor::Schedule schedule);
		static ::Dynamic applyDefaults_dyn();

		static  ::hx::concurrent::executor::Schedule assertValid( ::hx::concurrent::executor::Schedule schedule);
		static ::Dynamic assertValid_dyn();

		static Float firstRunAt( ::hx::concurrent::executor::Schedule schedule);
		static ::Dynamic firstRunAt_dyn();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace executor

#endif /* INCLUDED_hx_concurrent_executor_ScheduleTools */ 
