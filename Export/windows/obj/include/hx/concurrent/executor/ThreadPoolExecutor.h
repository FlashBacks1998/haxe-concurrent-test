// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_executor_ThreadPoolExecutor
#define INCLUDED_hx_concurrent_executor_ThreadPoolExecutor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_executor_Executor
#include <hx/concurrent/executor/Executor.h>
#endif
HX_DECLARE_CLASS2(hx,concurrent,AbstractFuture)
HX_DECLARE_CLASS2(hx,concurrent,CompletableFuture)
HX_DECLARE_CLASS2(hx,concurrent,Future)
HX_DECLARE_CLASS2(hx,concurrent,Service)
HX_DECLARE_CLASS2(hx,concurrent,ServiceBase)
HX_DECLARE_CLASS3(hx,concurrent,collection,Queue)
HX_DECLARE_CLASS3(hx,concurrent,executor,AbstractTaskFuture)
HX_DECLARE_CLASS3(hx,concurrent,executor,Executor)
HX_DECLARE_CLASS3(hx,concurrent,executor,Schedule)
HX_DECLARE_CLASS3(hx,concurrent,executor,TaskFuture)
HX_DECLARE_CLASS3(hx,concurrent,executor,ThreadPoolExecutor)
HX_DECLARE_CLASS4(hx,concurrent,executor,_ThreadPoolExecutor,TaskFutureImpl)
HX_DECLARE_CLASS4(hx,concurrent,internal,_Either2,_Either2)
HX_DECLARE_CLASS3(hx,concurrent,thread,ThreadPool)

namespace hx{
namespace concurrent{
namespace executor{


class HXCPP_CLASS_ATTRIBUTES ThreadPoolExecutor_obj : public  ::hx::concurrent::executor::Executor_obj
{
	public:
		typedef  ::hx::concurrent::executor::Executor_obj super;
		typedef ThreadPoolExecutor_obj OBJ_;
		ThreadPoolExecutor_obj();

	public:
		enum { _hx_ClassId = 0x7d02fb17 };

		void __construct(int threadPoolSize,::hx::Null< bool >  __o_autostart);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.executor.ThreadPoolExecutor")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.executor.ThreadPoolExecutor"); }
		static ::hx::ObjectPtr< ThreadPoolExecutor_obj > __new(int threadPoolSize,::hx::Null< bool >  __o_autostart);
		static ::hx::ObjectPtr< ThreadPoolExecutor_obj > __alloc(::hx::Ctx *_hx_ctx,int threadPoolSize,::hx::Null< bool >  __o_autostart);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ThreadPoolExecutor_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ThreadPoolExecutor",59,58,e0,1c); }

		static void __boot();
		static int SCHEDULER_RESOLUTION_MS;
		static Float SCHEDULER_RESOLUTION_SEC;
		 ::hx::concurrent::thread::ThreadPool _threadPool;
		::Array< ::Dynamic> _scheduledTasks;
		 ::hx::concurrent::collection::Queue _newScheduledTasks;
		void onStart();

		::Dynamic submit( ::hx::concurrent::internal::_Either2::_Either2 task, ::hx::concurrent::executor::Schedule schedule);

		void stop();

};

} // end namespace hx
} // end namespace concurrent
} // end namespace executor

#endif /* INCLUDED_hx_concurrent_executor_ThreadPoolExecutor */ 
