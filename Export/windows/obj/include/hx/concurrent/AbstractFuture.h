// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_AbstractFuture
#define INCLUDED_hx_concurrent_AbstractFuture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_Future
#include <hx/concurrent/Future.h>
#endif
HX_DECLARE_CLASS2(hx,concurrent,AbstractFuture)
HX_DECLARE_CLASS2(hx,concurrent,Future)
HX_DECLARE_CLASS2(hx,concurrent,FutureResult)
HX_DECLARE_CLASS3(hx,concurrent,lock,AbstractAcquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,Acquirable)
HX_DECLARE_CLASS3(hx,concurrent,lock,RLock)

namespace hx{
namespace concurrent{


class HXCPP_CLASS_ATTRIBUTES AbstractFuture_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AbstractFuture_obj OBJ_;
		AbstractFuture_obj();

	public:
		enum { _hx_ClassId = 0x77d6e8d0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.AbstractFuture")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.AbstractFuture"); }

		//~AbstractFuture_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("AbstractFuture",e5,36,3a,3c); }

		::Array< ::Dynamic> completionListeners;
		 ::hx::concurrent::lock::RLock sync;
		 ::hx::concurrent::FutureResult result;
		bool isComplete();
		::Dynamic isComplete_dyn();

		void onCompletion( ::Dynamic listener);
		::Dynamic onCompletion_dyn();

};

} // end namespace hx
} // end namespace concurrent

#endif /* INCLUDED_hx_concurrent_AbstractFuture */ 
