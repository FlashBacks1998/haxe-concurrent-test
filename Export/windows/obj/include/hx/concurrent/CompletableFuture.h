// Generated by Haxe 4.3.3
#ifndef INCLUDED_hx_concurrent_CompletableFuture
#define INCLUDED_hx_concurrent_CompletableFuture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hx_concurrent_AbstractFuture
#include <hx/concurrent/AbstractFuture.h>
#endif
HX_DECLARE_CLASS2(hx,concurrent,AbstractFuture)
HX_DECLARE_CLASS2(hx,concurrent,CompletableFuture)
HX_DECLARE_CLASS2(hx,concurrent,Future)
HX_DECLARE_CLASS4(hx,concurrent,internal,_Either2,_Either2)

namespace hx{
namespace concurrent{


class HXCPP_CLASS_ATTRIBUTES CompletableFuture_obj : public  ::hx::concurrent::AbstractFuture_obj
{
	public:
		typedef  ::hx::concurrent::AbstractFuture_obj super;
		typedef CompletableFuture_obj OBJ_;
		CompletableFuture_obj();

	public:
		enum { _hx_ClassId = 0x1af78b62 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hx.concurrent.CompletableFuture")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hx.concurrent.CompletableFuture"); }
		static ::hx::ObjectPtr< CompletableFuture_obj > __new();
		static ::hx::ObjectPtr< CompletableFuture_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CompletableFuture_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CompletableFuture",89,be,f1,ce); }

		bool complete( ::hx::concurrent::internal::_Either2::_Either2 result,::hx::Null< bool >  overwriteResult);
		::Dynamic complete_dyn();

};

} // end namespace hx
} // end namespace concurrent

#endif /* INCLUDED_hx_concurrent_CompletableFuture */ 
